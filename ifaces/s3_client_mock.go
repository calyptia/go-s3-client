// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package ifaces

import (
	"context"
	"sync"

	"github.com/aws/aws-sdk-go-v2/service/s3"
)

// Ensure, that ClientMock does implement Client.
// If this is not the case, regenerate this file with moq.
var _ Client = &ClientMock{}

// ClientMock is a mock implementation of Client.
//
//	func TestSomethingThatUsesClient(t *testing.T) {
//
//		// make and configure a mocked Client
//		mockedClient := &ClientMock{
//			AbortMultipartUploadFunc: func(ctx context.Context, params *s3.AbortMultipartUploadInput, optFns ...func(*s3.Options)) (*s3.AbortMultipartUploadOutput, error) {
//				panic("mock out the AbortMultipartUpload method")
//			},
//			CompleteMultipartUploadFunc: func(ctx context.Context, params *s3.CompleteMultipartUploadInput, optFns ...func(*s3.Options)) (*s3.CompleteMultipartUploadOutput, error) {
//				panic("mock out the CompleteMultipartUpload method")
//			},
//			CopyObjectFunc: func(ctx context.Context, params *s3.CopyObjectInput, optFns ...func(*s3.Options)) (*s3.CopyObjectOutput, error) {
//				panic("mock out the CopyObject method")
//			},
//			CreateBucketFunc: func(ctx context.Context, params *s3.CreateBucketInput, optFns ...func(*s3.Options)) (*s3.CreateBucketOutput, error) {
//				panic("mock out the CreateBucket method")
//			},
//			CreateMultipartUploadFunc: func(ctx context.Context, params *s3.CreateMultipartUploadInput, optFns ...func(*s3.Options)) (*s3.CreateMultipartUploadOutput, error) {
//				panic("mock out the CreateMultipartUpload method")
//			},
//			DeleteBucketFunc: func(ctx context.Context, params *s3.DeleteBucketInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketOutput, error) {
//				panic("mock out the DeleteBucket method")
//			},
//			DeleteBucketAnalyticsConfigurationFunc: func(ctx context.Context, params *s3.DeleteBucketAnalyticsConfigurationInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketAnalyticsConfigurationOutput, error) {
//				panic("mock out the DeleteBucketAnalyticsConfiguration method")
//			},
//			DeleteBucketCorsFunc: func(ctx context.Context, params *s3.DeleteBucketCorsInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketCorsOutput, error) {
//				panic("mock out the DeleteBucketCors method")
//			},
//			DeleteBucketEncryptionFunc: func(ctx context.Context, params *s3.DeleteBucketEncryptionInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketEncryptionOutput, error) {
//				panic("mock out the DeleteBucketEncryption method")
//			},
//			DeleteBucketIntelligentTieringConfigurationFunc: func(ctx context.Context, params *s3.DeleteBucketIntelligentTieringConfigurationInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketIntelligentTieringConfigurationOutput, error) {
//				panic("mock out the DeleteBucketIntelligentTieringConfiguration method")
//			},
//			DeleteBucketInventoryConfigurationFunc: func(ctx context.Context, params *s3.DeleteBucketInventoryConfigurationInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketInventoryConfigurationOutput, error) {
//				panic("mock out the DeleteBucketInventoryConfiguration method")
//			},
//			DeleteBucketLifecycleFunc: func(ctx context.Context, params *s3.DeleteBucketLifecycleInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketLifecycleOutput, error) {
//				panic("mock out the DeleteBucketLifecycle method")
//			},
//			DeleteBucketMetricsConfigurationFunc: func(ctx context.Context, params *s3.DeleteBucketMetricsConfigurationInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketMetricsConfigurationOutput, error) {
//				panic("mock out the DeleteBucketMetricsConfiguration method")
//			},
//			DeleteBucketOwnershipControlsFunc: func(ctx context.Context, params *s3.DeleteBucketOwnershipControlsInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketOwnershipControlsOutput, error) {
//				panic("mock out the DeleteBucketOwnershipControls method")
//			},
//			DeleteBucketPolicyFunc: func(ctx context.Context, params *s3.DeleteBucketPolicyInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketPolicyOutput, error) {
//				panic("mock out the DeleteBucketPolicy method")
//			},
//			DeleteBucketReplicationFunc: func(ctx context.Context, params *s3.DeleteBucketReplicationInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketReplicationOutput, error) {
//				panic("mock out the DeleteBucketReplication method")
//			},
//			DeleteBucketTaggingFunc: func(ctx context.Context, params *s3.DeleteBucketTaggingInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketTaggingOutput, error) {
//				panic("mock out the DeleteBucketTagging method")
//			},
//			DeleteBucketWebsiteFunc: func(ctx context.Context, params *s3.DeleteBucketWebsiteInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketWebsiteOutput, error) {
//				panic("mock out the DeleteBucketWebsite method")
//			},
//			DeleteObjectFunc: func(ctx context.Context, params *s3.DeleteObjectInput, optFns ...func(*s3.Options)) (*s3.DeleteObjectOutput, error) {
//				panic("mock out the DeleteObject method")
//			},
//			DeleteObjectTaggingFunc: func(ctx context.Context, params *s3.DeleteObjectTaggingInput, optFns ...func(*s3.Options)) (*s3.DeleteObjectTaggingOutput, error) {
//				panic("mock out the DeleteObjectTagging method")
//			},
//			DeleteObjectsFunc: func(ctx context.Context, params *s3.DeleteObjectsInput, optFns ...func(*s3.Options)) (*s3.DeleteObjectsOutput, error) {
//				panic("mock out the DeleteObjects method")
//			},
//			DeletePublicAccessBlockFunc: func(ctx context.Context, params *s3.DeletePublicAccessBlockInput, optFns ...func(*s3.Options)) (*s3.DeletePublicAccessBlockOutput, error) {
//				panic("mock out the DeletePublicAccessBlock method")
//			},
//			GetBucketAccelerateConfigurationFunc: func(ctx context.Context, params *s3.GetBucketAccelerateConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketAccelerateConfigurationOutput, error) {
//				panic("mock out the GetBucketAccelerateConfiguration method")
//			},
//			GetBucketAclFunc: func(ctx context.Context, params *s3.GetBucketAclInput, optFns ...func(*s3.Options)) (*s3.GetBucketAclOutput, error) {
//				panic("mock out the GetBucketAcl method")
//			},
//			GetBucketAnalyticsConfigurationFunc: func(ctx context.Context, params *s3.GetBucketAnalyticsConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketAnalyticsConfigurationOutput, error) {
//				panic("mock out the GetBucketAnalyticsConfiguration method")
//			},
//			GetBucketCorsFunc: func(ctx context.Context, params *s3.GetBucketCorsInput, optFns ...func(*s3.Options)) (*s3.GetBucketCorsOutput, error) {
//				panic("mock out the GetBucketCors method")
//			},
//			GetBucketEncryptionFunc: func(ctx context.Context, params *s3.GetBucketEncryptionInput, optFns ...func(*s3.Options)) (*s3.GetBucketEncryptionOutput, error) {
//				panic("mock out the GetBucketEncryption method")
//			},
//			GetBucketIntelligentTieringConfigurationFunc: func(ctx context.Context, params *s3.GetBucketIntelligentTieringConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketIntelligentTieringConfigurationOutput, error) {
//				panic("mock out the GetBucketIntelligentTieringConfiguration method")
//			},
//			GetBucketInventoryConfigurationFunc: func(ctx context.Context, params *s3.GetBucketInventoryConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketInventoryConfigurationOutput, error) {
//				panic("mock out the GetBucketInventoryConfiguration method")
//			},
//			GetBucketLifecycleConfigurationFunc: func(ctx context.Context, params *s3.GetBucketLifecycleConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketLifecycleConfigurationOutput, error) {
//				panic("mock out the GetBucketLifecycleConfiguration method")
//			},
//			GetBucketLocationFunc: func(ctx context.Context, params *s3.GetBucketLocationInput, optFns ...func(*s3.Options)) (*s3.GetBucketLocationOutput, error) {
//				panic("mock out the GetBucketLocation method")
//			},
//			GetBucketLoggingFunc: func(ctx context.Context, params *s3.GetBucketLoggingInput, optFns ...func(*s3.Options)) (*s3.GetBucketLoggingOutput, error) {
//				panic("mock out the GetBucketLogging method")
//			},
//			GetBucketMetricsConfigurationFunc: func(ctx context.Context, params *s3.GetBucketMetricsConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketMetricsConfigurationOutput, error) {
//				panic("mock out the GetBucketMetricsConfiguration method")
//			},
//			GetBucketNotificationConfigurationFunc: func(ctx context.Context, params *s3.GetBucketNotificationConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketNotificationConfigurationOutput, error) {
//				panic("mock out the GetBucketNotificationConfiguration method")
//			},
//			GetBucketOwnershipControlsFunc: func(ctx context.Context, params *s3.GetBucketOwnershipControlsInput, optFns ...func(*s3.Options)) (*s3.GetBucketOwnershipControlsOutput, error) {
//				panic("mock out the GetBucketOwnershipControls method")
//			},
//			GetBucketPolicyFunc: func(ctx context.Context, params *s3.GetBucketPolicyInput, optFns ...func(*s3.Options)) (*s3.GetBucketPolicyOutput, error) {
//				panic("mock out the GetBucketPolicy method")
//			},
//			GetBucketPolicyStatusFunc: func(ctx context.Context, params *s3.GetBucketPolicyStatusInput, optFns ...func(*s3.Options)) (*s3.GetBucketPolicyStatusOutput, error) {
//				panic("mock out the GetBucketPolicyStatus method")
//			},
//			GetBucketReplicationFunc: func(ctx context.Context, params *s3.GetBucketReplicationInput, optFns ...func(*s3.Options)) (*s3.GetBucketReplicationOutput, error) {
//				panic("mock out the GetBucketReplication method")
//			},
//			GetBucketRequestPaymentFunc: func(ctx context.Context, params *s3.GetBucketRequestPaymentInput, optFns ...func(*s3.Options)) (*s3.GetBucketRequestPaymentOutput, error) {
//				panic("mock out the GetBucketRequestPayment method")
//			},
//			GetBucketTaggingFunc: func(ctx context.Context, params *s3.GetBucketTaggingInput, optFns ...func(*s3.Options)) (*s3.GetBucketTaggingOutput, error) {
//				panic("mock out the GetBucketTagging method")
//			},
//			GetBucketVersioningFunc: func(ctx context.Context, params *s3.GetBucketVersioningInput, optFns ...func(*s3.Options)) (*s3.GetBucketVersioningOutput, error) {
//				panic("mock out the GetBucketVersioning method")
//			},
//			GetBucketWebsiteFunc: func(ctx context.Context, params *s3.GetBucketWebsiteInput, optFns ...func(*s3.Options)) (*s3.GetBucketWebsiteOutput, error) {
//				panic("mock out the GetBucketWebsite method")
//			},
//			GetObjectFunc: func(ctx context.Context, params *s3.GetObjectInput, optFns ...func(*s3.Options)) (*s3.GetObjectOutput, error) {
//				panic("mock out the GetObject method")
//			},
//			GetObjectAclFunc: func(ctx context.Context, params *s3.GetObjectAclInput, optFns ...func(*s3.Options)) (*s3.GetObjectAclOutput, error) {
//				panic("mock out the GetObjectAcl method")
//			},
//			GetObjectAttributesFunc: func(ctx context.Context, params *s3.GetObjectAttributesInput, optFns ...func(*s3.Options)) (*s3.GetObjectAttributesOutput, error) {
//				panic("mock out the GetObjectAttributes method")
//			},
//			GetObjectLegalHoldFunc: func(ctx context.Context, params *s3.GetObjectLegalHoldInput, optFns ...func(*s3.Options)) (*s3.GetObjectLegalHoldOutput, error) {
//				panic("mock out the GetObjectLegalHold method")
//			},
//			GetObjectLockConfigurationFunc: func(ctx context.Context, params *s3.GetObjectLockConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetObjectLockConfigurationOutput, error) {
//				panic("mock out the GetObjectLockConfiguration method")
//			},
//			GetObjectRetentionFunc: func(ctx context.Context, params *s3.GetObjectRetentionInput, optFns ...func(*s3.Options)) (*s3.GetObjectRetentionOutput, error) {
//				panic("mock out the GetObjectRetention method")
//			},
//			GetObjectTaggingFunc: func(ctx context.Context, params *s3.GetObjectTaggingInput, optFns ...func(*s3.Options)) (*s3.GetObjectTaggingOutput, error) {
//				panic("mock out the GetObjectTagging method")
//			},
//			GetObjectTorrentFunc: func(ctx context.Context, params *s3.GetObjectTorrentInput, optFns ...func(*s3.Options)) (*s3.GetObjectTorrentOutput, error) {
//				panic("mock out the GetObjectTorrent method")
//			},
//			GetPublicAccessBlockFunc: func(ctx context.Context, params *s3.GetPublicAccessBlockInput, optFns ...func(*s3.Options)) (*s3.GetPublicAccessBlockOutput, error) {
//				panic("mock out the GetPublicAccessBlock method")
//			},
//			HeadBucketFunc: func(ctx context.Context, params *s3.HeadBucketInput, optFns ...func(*s3.Options)) (*s3.HeadBucketOutput, error) {
//				panic("mock out the HeadBucket method")
//			},
//			HeadObjectFunc: func(ctx context.Context, params *s3.HeadObjectInput, optFns ...func(*s3.Options)) (*s3.HeadObjectOutput, error) {
//				panic("mock out the HeadObject method")
//			},
//			ListBucketAnalyticsConfigurationsFunc: func(ctx context.Context, params *s3.ListBucketAnalyticsConfigurationsInput, optFns ...func(*s3.Options)) (*s3.ListBucketAnalyticsConfigurationsOutput, error) {
//				panic("mock out the ListBucketAnalyticsConfigurations method")
//			},
//			ListBucketIntelligentTieringConfigurationsFunc: func(ctx context.Context, params *s3.ListBucketIntelligentTieringConfigurationsInput, optFns ...func(*s3.Options)) (*s3.ListBucketIntelligentTieringConfigurationsOutput, error) {
//				panic("mock out the ListBucketIntelligentTieringConfigurations method")
//			},
//			ListBucketInventoryConfigurationsFunc: func(ctx context.Context, params *s3.ListBucketInventoryConfigurationsInput, optFns ...func(*s3.Options)) (*s3.ListBucketInventoryConfigurationsOutput, error) {
//				panic("mock out the ListBucketInventoryConfigurations method")
//			},
//			ListBucketMetricsConfigurationsFunc: func(ctx context.Context, params *s3.ListBucketMetricsConfigurationsInput, optFns ...func(*s3.Options)) (*s3.ListBucketMetricsConfigurationsOutput, error) {
//				panic("mock out the ListBucketMetricsConfigurations method")
//			},
//			ListBucketsFunc: func(ctx context.Context, params *s3.ListBucketsInput, optFns ...func(*s3.Options)) (*s3.ListBucketsOutput, error) {
//				panic("mock out the ListBuckets method")
//			},
//			ListMultipartUploadsFunc: func(ctx context.Context, params *s3.ListMultipartUploadsInput, optFns ...func(*s3.Options)) (*s3.ListMultipartUploadsOutput, error) {
//				panic("mock out the ListMultipartUploads method")
//			},
//			ListObjectVersionsFunc: func(ctx context.Context, params *s3.ListObjectVersionsInput, optFns ...func(*s3.Options)) (*s3.ListObjectVersionsOutput, error) {
//				panic("mock out the ListObjectVersions method")
//			},
//			ListObjectsFunc: func(ctx context.Context, params *s3.ListObjectsInput, optFns ...func(*s3.Options)) (*s3.ListObjectsOutput, error) {
//				panic("mock out the ListObjects method")
//			},
//			ListObjectsV2Func: func(ctx context.Context, params *s3.ListObjectsV2Input, optFns ...func(*s3.Options)) (*s3.ListObjectsV2Output, error) {
//				panic("mock out the ListObjectsV2 method")
//			},
//			ListPartsFunc: func(ctx context.Context, params *s3.ListPartsInput, optFns ...func(*s3.Options)) (*s3.ListPartsOutput, error) {
//				panic("mock out the ListParts method")
//			},
//			PutBucketAccelerateConfigurationFunc: func(ctx context.Context, params *s3.PutBucketAccelerateConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketAccelerateConfigurationOutput, error) {
//				panic("mock out the PutBucketAccelerateConfiguration method")
//			},
//			PutBucketAclFunc: func(ctx context.Context, params *s3.PutBucketAclInput, optFns ...func(*s3.Options)) (*s3.PutBucketAclOutput, error) {
//				panic("mock out the PutBucketAcl method")
//			},
//			PutBucketAnalyticsConfigurationFunc: func(ctx context.Context, params *s3.PutBucketAnalyticsConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketAnalyticsConfigurationOutput, error) {
//				panic("mock out the PutBucketAnalyticsConfiguration method")
//			},
//			PutBucketCorsFunc: func(ctx context.Context, params *s3.PutBucketCorsInput, optFns ...func(*s3.Options)) (*s3.PutBucketCorsOutput, error) {
//				panic("mock out the PutBucketCors method")
//			},
//			PutBucketEncryptionFunc: func(ctx context.Context, params *s3.PutBucketEncryptionInput, optFns ...func(*s3.Options)) (*s3.PutBucketEncryptionOutput, error) {
//				panic("mock out the PutBucketEncryption method")
//			},
//			PutBucketIntelligentTieringConfigurationFunc: func(ctx context.Context, params *s3.PutBucketIntelligentTieringConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketIntelligentTieringConfigurationOutput, error) {
//				panic("mock out the PutBucketIntelligentTieringConfiguration method")
//			},
//			PutBucketInventoryConfigurationFunc: func(ctx context.Context, params *s3.PutBucketInventoryConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketInventoryConfigurationOutput, error) {
//				panic("mock out the PutBucketInventoryConfiguration method")
//			},
//			PutBucketLifecycleConfigurationFunc: func(ctx context.Context, params *s3.PutBucketLifecycleConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketLifecycleConfigurationOutput, error) {
//				panic("mock out the PutBucketLifecycleConfiguration method")
//			},
//			PutBucketLoggingFunc: func(ctx context.Context, params *s3.PutBucketLoggingInput, optFns ...func(*s3.Options)) (*s3.PutBucketLoggingOutput, error) {
//				panic("mock out the PutBucketLogging method")
//			},
//			PutBucketMetricsConfigurationFunc: func(ctx context.Context, params *s3.PutBucketMetricsConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketMetricsConfigurationOutput, error) {
//				panic("mock out the PutBucketMetricsConfiguration method")
//			},
//			PutBucketNotificationConfigurationFunc: func(ctx context.Context, params *s3.PutBucketNotificationConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketNotificationConfigurationOutput, error) {
//				panic("mock out the PutBucketNotificationConfiguration method")
//			},
//			PutBucketOwnershipControlsFunc: func(ctx context.Context, params *s3.PutBucketOwnershipControlsInput, optFns ...func(*s3.Options)) (*s3.PutBucketOwnershipControlsOutput, error) {
//				panic("mock out the PutBucketOwnershipControls method")
//			},
//			PutBucketPolicyFunc: func(ctx context.Context, params *s3.PutBucketPolicyInput, optFns ...func(*s3.Options)) (*s3.PutBucketPolicyOutput, error) {
//				panic("mock out the PutBucketPolicy method")
//			},
//			PutBucketReplicationFunc: func(ctx context.Context, params *s3.PutBucketReplicationInput, optFns ...func(*s3.Options)) (*s3.PutBucketReplicationOutput, error) {
//				panic("mock out the PutBucketReplication method")
//			},
//			PutBucketRequestPaymentFunc: func(ctx context.Context, params *s3.PutBucketRequestPaymentInput, optFns ...func(*s3.Options)) (*s3.PutBucketRequestPaymentOutput, error) {
//				panic("mock out the PutBucketRequestPayment method")
//			},
//			PutBucketTaggingFunc: func(ctx context.Context, params *s3.PutBucketTaggingInput, optFns ...func(*s3.Options)) (*s3.PutBucketTaggingOutput, error) {
//				panic("mock out the PutBucketTagging method")
//			},
//			PutBucketVersioningFunc: func(ctx context.Context, params *s3.PutBucketVersioningInput, optFns ...func(*s3.Options)) (*s3.PutBucketVersioningOutput, error) {
//				panic("mock out the PutBucketVersioning method")
//			},
//			PutBucketWebsiteFunc: func(ctx context.Context, params *s3.PutBucketWebsiteInput, optFns ...func(*s3.Options)) (*s3.PutBucketWebsiteOutput, error) {
//				panic("mock out the PutBucketWebsite method")
//			},
//			PutObjectFunc: func(ctx context.Context, params *s3.PutObjectInput, optFns ...func(*s3.Options)) (*s3.PutObjectOutput, error) {
//				panic("mock out the PutObject method")
//			},
//			PutObjectAclFunc: func(ctx context.Context, params *s3.PutObjectAclInput, optFns ...func(*s3.Options)) (*s3.PutObjectAclOutput, error) {
//				panic("mock out the PutObjectAcl method")
//			},
//			PutObjectLegalHoldFunc: func(ctx context.Context, params *s3.PutObjectLegalHoldInput, optFns ...func(*s3.Options)) (*s3.PutObjectLegalHoldOutput, error) {
//				panic("mock out the PutObjectLegalHold method")
//			},
//			PutObjectLockConfigurationFunc: func(ctx context.Context, params *s3.PutObjectLockConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutObjectLockConfigurationOutput, error) {
//				panic("mock out the PutObjectLockConfiguration method")
//			},
//			PutObjectRetentionFunc: func(ctx context.Context, params *s3.PutObjectRetentionInput, optFns ...func(*s3.Options)) (*s3.PutObjectRetentionOutput, error) {
//				panic("mock out the PutObjectRetention method")
//			},
//			PutObjectTaggingFunc: func(ctx context.Context, params *s3.PutObjectTaggingInput, optFns ...func(*s3.Options)) (*s3.PutObjectTaggingOutput, error) {
//				panic("mock out the PutObjectTagging method")
//			},
//			PutPublicAccessBlockFunc: func(ctx context.Context, params *s3.PutPublicAccessBlockInput, optFns ...func(*s3.Options)) (*s3.PutPublicAccessBlockOutput, error) {
//				panic("mock out the PutPublicAccessBlock method")
//			},
//			RestoreObjectFunc: func(ctx context.Context, params *s3.RestoreObjectInput, optFns ...func(*s3.Options)) (*s3.RestoreObjectOutput, error) {
//				panic("mock out the RestoreObject method")
//			},
//			SelectObjectContentFunc: func(ctx context.Context, params *s3.SelectObjectContentInput, optFns ...func(*s3.Options)) (*s3.SelectObjectContentOutput, error) {
//				panic("mock out the SelectObjectContent method")
//			},
//			UploadPartFunc: func(ctx context.Context, params *s3.UploadPartInput, optFns ...func(*s3.Options)) (*s3.UploadPartOutput, error) {
//				panic("mock out the UploadPart method")
//			},
//			UploadPartCopyFunc: func(ctx context.Context, params *s3.UploadPartCopyInput, optFns ...func(*s3.Options)) (*s3.UploadPartCopyOutput, error) {
//				panic("mock out the UploadPartCopy method")
//			},
//			WriteGetObjectResponseFunc: func(ctx context.Context, params *s3.WriteGetObjectResponseInput, optFns ...func(*s3.Options)) (*s3.WriteGetObjectResponseOutput, error) {
//				panic("mock out the WriteGetObjectResponse method")
//			},
//		}
//
//		// use mockedClient in code that requires Client
//		// and then make assertions.
//
//	}
type ClientMock struct {
	// AbortMultipartUploadFunc mocks the AbortMultipartUpload method.
	AbortMultipartUploadFunc func(ctx context.Context, params *s3.AbortMultipartUploadInput, optFns ...func(*s3.Options)) (*s3.AbortMultipartUploadOutput, error)

	// CompleteMultipartUploadFunc mocks the CompleteMultipartUpload method.
	CompleteMultipartUploadFunc func(ctx context.Context, params *s3.CompleteMultipartUploadInput, optFns ...func(*s3.Options)) (*s3.CompleteMultipartUploadOutput, error)

	// CopyObjectFunc mocks the CopyObject method.
	CopyObjectFunc func(ctx context.Context, params *s3.CopyObjectInput, optFns ...func(*s3.Options)) (*s3.CopyObjectOutput, error)

	// CreateBucketFunc mocks the CreateBucket method.
	CreateBucketFunc func(ctx context.Context, params *s3.CreateBucketInput, optFns ...func(*s3.Options)) (*s3.CreateBucketOutput, error)

	// CreateMultipartUploadFunc mocks the CreateMultipartUpload method.
	CreateMultipartUploadFunc func(ctx context.Context, params *s3.CreateMultipartUploadInput, optFns ...func(*s3.Options)) (*s3.CreateMultipartUploadOutput, error)

	// DeleteBucketFunc mocks the DeleteBucket method.
	DeleteBucketFunc func(ctx context.Context, params *s3.DeleteBucketInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketOutput, error)

	// DeleteBucketAnalyticsConfigurationFunc mocks the DeleteBucketAnalyticsConfiguration method.
	DeleteBucketAnalyticsConfigurationFunc func(ctx context.Context, params *s3.DeleteBucketAnalyticsConfigurationInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketAnalyticsConfigurationOutput, error)

	// DeleteBucketCorsFunc mocks the DeleteBucketCors method.
	DeleteBucketCorsFunc func(ctx context.Context, params *s3.DeleteBucketCorsInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketCorsOutput, error)

	// DeleteBucketEncryptionFunc mocks the DeleteBucketEncryption method.
	DeleteBucketEncryptionFunc func(ctx context.Context, params *s3.DeleteBucketEncryptionInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketEncryptionOutput, error)

	// DeleteBucketIntelligentTieringConfigurationFunc mocks the DeleteBucketIntelligentTieringConfiguration method.
	DeleteBucketIntelligentTieringConfigurationFunc func(ctx context.Context, params *s3.DeleteBucketIntelligentTieringConfigurationInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketIntelligentTieringConfigurationOutput, error)

	// DeleteBucketInventoryConfigurationFunc mocks the DeleteBucketInventoryConfiguration method.
	DeleteBucketInventoryConfigurationFunc func(ctx context.Context, params *s3.DeleteBucketInventoryConfigurationInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketInventoryConfigurationOutput, error)

	// DeleteBucketLifecycleFunc mocks the DeleteBucketLifecycle method.
	DeleteBucketLifecycleFunc func(ctx context.Context, params *s3.DeleteBucketLifecycleInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketLifecycleOutput, error)

	// DeleteBucketMetricsConfigurationFunc mocks the DeleteBucketMetricsConfiguration method.
	DeleteBucketMetricsConfigurationFunc func(ctx context.Context, params *s3.DeleteBucketMetricsConfigurationInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketMetricsConfigurationOutput, error)

	// DeleteBucketOwnershipControlsFunc mocks the DeleteBucketOwnershipControls method.
	DeleteBucketOwnershipControlsFunc func(ctx context.Context, params *s3.DeleteBucketOwnershipControlsInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketOwnershipControlsOutput, error)

	// DeleteBucketPolicyFunc mocks the DeleteBucketPolicy method.
	DeleteBucketPolicyFunc func(ctx context.Context, params *s3.DeleteBucketPolicyInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketPolicyOutput, error)

	// DeleteBucketReplicationFunc mocks the DeleteBucketReplication method.
	DeleteBucketReplicationFunc func(ctx context.Context, params *s3.DeleteBucketReplicationInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketReplicationOutput, error)

	// DeleteBucketTaggingFunc mocks the DeleteBucketTagging method.
	DeleteBucketTaggingFunc func(ctx context.Context, params *s3.DeleteBucketTaggingInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketTaggingOutput, error)

	// DeleteBucketWebsiteFunc mocks the DeleteBucketWebsite method.
	DeleteBucketWebsiteFunc func(ctx context.Context, params *s3.DeleteBucketWebsiteInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketWebsiteOutput, error)

	// DeleteObjectFunc mocks the DeleteObject method.
	DeleteObjectFunc func(ctx context.Context, params *s3.DeleteObjectInput, optFns ...func(*s3.Options)) (*s3.DeleteObjectOutput, error)

	// DeleteObjectTaggingFunc mocks the DeleteObjectTagging method.
	DeleteObjectTaggingFunc func(ctx context.Context, params *s3.DeleteObjectTaggingInput, optFns ...func(*s3.Options)) (*s3.DeleteObjectTaggingOutput, error)

	// DeleteObjectsFunc mocks the DeleteObjects method.
	DeleteObjectsFunc func(ctx context.Context, params *s3.DeleteObjectsInput, optFns ...func(*s3.Options)) (*s3.DeleteObjectsOutput, error)

	// DeletePublicAccessBlockFunc mocks the DeletePublicAccessBlock method.
	DeletePublicAccessBlockFunc func(ctx context.Context, params *s3.DeletePublicAccessBlockInput, optFns ...func(*s3.Options)) (*s3.DeletePublicAccessBlockOutput, error)

	// GetBucketAccelerateConfigurationFunc mocks the GetBucketAccelerateConfiguration method.
	GetBucketAccelerateConfigurationFunc func(ctx context.Context, params *s3.GetBucketAccelerateConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketAccelerateConfigurationOutput, error)

	// GetBucketAclFunc mocks the GetBucketAcl method.
	GetBucketAclFunc func(ctx context.Context, params *s3.GetBucketAclInput, optFns ...func(*s3.Options)) (*s3.GetBucketAclOutput, error)

	// GetBucketAnalyticsConfigurationFunc mocks the GetBucketAnalyticsConfiguration method.
	GetBucketAnalyticsConfigurationFunc func(ctx context.Context, params *s3.GetBucketAnalyticsConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketAnalyticsConfigurationOutput, error)

	// GetBucketCorsFunc mocks the GetBucketCors method.
	GetBucketCorsFunc func(ctx context.Context, params *s3.GetBucketCorsInput, optFns ...func(*s3.Options)) (*s3.GetBucketCorsOutput, error)

	// GetBucketEncryptionFunc mocks the GetBucketEncryption method.
	GetBucketEncryptionFunc func(ctx context.Context, params *s3.GetBucketEncryptionInput, optFns ...func(*s3.Options)) (*s3.GetBucketEncryptionOutput, error)

	// GetBucketIntelligentTieringConfigurationFunc mocks the GetBucketIntelligentTieringConfiguration method.
	GetBucketIntelligentTieringConfigurationFunc func(ctx context.Context, params *s3.GetBucketIntelligentTieringConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketIntelligentTieringConfigurationOutput, error)

	// GetBucketInventoryConfigurationFunc mocks the GetBucketInventoryConfiguration method.
	GetBucketInventoryConfigurationFunc func(ctx context.Context, params *s3.GetBucketInventoryConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketInventoryConfigurationOutput, error)

	// GetBucketLifecycleConfigurationFunc mocks the GetBucketLifecycleConfiguration method.
	GetBucketLifecycleConfigurationFunc func(ctx context.Context, params *s3.GetBucketLifecycleConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketLifecycleConfigurationOutput, error)

	// GetBucketLocationFunc mocks the GetBucketLocation method.
	GetBucketLocationFunc func(ctx context.Context, params *s3.GetBucketLocationInput, optFns ...func(*s3.Options)) (*s3.GetBucketLocationOutput, error)

	// GetBucketLoggingFunc mocks the GetBucketLogging method.
	GetBucketLoggingFunc func(ctx context.Context, params *s3.GetBucketLoggingInput, optFns ...func(*s3.Options)) (*s3.GetBucketLoggingOutput, error)

	// GetBucketMetricsConfigurationFunc mocks the GetBucketMetricsConfiguration method.
	GetBucketMetricsConfigurationFunc func(ctx context.Context, params *s3.GetBucketMetricsConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketMetricsConfigurationOutput, error)

	// GetBucketNotificationConfigurationFunc mocks the GetBucketNotificationConfiguration method.
	GetBucketNotificationConfigurationFunc func(ctx context.Context, params *s3.GetBucketNotificationConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketNotificationConfigurationOutput, error)

	// GetBucketOwnershipControlsFunc mocks the GetBucketOwnershipControls method.
	GetBucketOwnershipControlsFunc func(ctx context.Context, params *s3.GetBucketOwnershipControlsInput, optFns ...func(*s3.Options)) (*s3.GetBucketOwnershipControlsOutput, error)

	// GetBucketPolicyFunc mocks the GetBucketPolicy method.
	GetBucketPolicyFunc func(ctx context.Context, params *s3.GetBucketPolicyInput, optFns ...func(*s3.Options)) (*s3.GetBucketPolicyOutput, error)

	// GetBucketPolicyStatusFunc mocks the GetBucketPolicyStatus method.
	GetBucketPolicyStatusFunc func(ctx context.Context, params *s3.GetBucketPolicyStatusInput, optFns ...func(*s3.Options)) (*s3.GetBucketPolicyStatusOutput, error)

	// GetBucketReplicationFunc mocks the GetBucketReplication method.
	GetBucketReplicationFunc func(ctx context.Context, params *s3.GetBucketReplicationInput, optFns ...func(*s3.Options)) (*s3.GetBucketReplicationOutput, error)

	// GetBucketRequestPaymentFunc mocks the GetBucketRequestPayment method.
	GetBucketRequestPaymentFunc func(ctx context.Context, params *s3.GetBucketRequestPaymentInput, optFns ...func(*s3.Options)) (*s3.GetBucketRequestPaymentOutput, error)

	// GetBucketTaggingFunc mocks the GetBucketTagging method.
	GetBucketTaggingFunc func(ctx context.Context, params *s3.GetBucketTaggingInput, optFns ...func(*s3.Options)) (*s3.GetBucketTaggingOutput, error)

	// GetBucketVersioningFunc mocks the GetBucketVersioning method.
	GetBucketVersioningFunc func(ctx context.Context, params *s3.GetBucketVersioningInput, optFns ...func(*s3.Options)) (*s3.GetBucketVersioningOutput, error)

	// GetBucketWebsiteFunc mocks the GetBucketWebsite method.
	GetBucketWebsiteFunc func(ctx context.Context, params *s3.GetBucketWebsiteInput, optFns ...func(*s3.Options)) (*s3.GetBucketWebsiteOutput, error)

	// GetObjectFunc mocks the GetObject method.
	GetObjectFunc func(ctx context.Context, params *s3.GetObjectInput, optFns ...func(*s3.Options)) (*s3.GetObjectOutput, error)

	// GetObjectAclFunc mocks the GetObjectAcl method.
	GetObjectAclFunc func(ctx context.Context, params *s3.GetObjectAclInput, optFns ...func(*s3.Options)) (*s3.GetObjectAclOutput, error)

	// GetObjectAttributesFunc mocks the GetObjectAttributes method.
	GetObjectAttributesFunc func(ctx context.Context, params *s3.GetObjectAttributesInput, optFns ...func(*s3.Options)) (*s3.GetObjectAttributesOutput, error)

	// GetObjectLegalHoldFunc mocks the GetObjectLegalHold method.
	GetObjectLegalHoldFunc func(ctx context.Context, params *s3.GetObjectLegalHoldInput, optFns ...func(*s3.Options)) (*s3.GetObjectLegalHoldOutput, error)

	// GetObjectLockConfigurationFunc mocks the GetObjectLockConfiguration method.
	GetObjectLockConfigurationFunc func(ctx context.Context, params *s3.GetObjectLockConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetObjectLockConfigurationOutput, error)

	// GetObjectRetentionFunc mocks the GetObjectRetention method.
	GetObjectRetentionFunc func(ctx context.Context, params *s3.GetObjectRetentionInput, optFns ...func(*s3.Options)) (*s3.GetObjectRetentionOutput, error)

	// GetObjectTaggingFunc mocks the GetObjectTagging method.
	GetObjectTaggingFunc func(ctx context.Context, params *s3.GetObjectTaggingInput, optFns ...func(*s3.Options)) (*s3.GetObjectTaggingOutput, error)

	// GetObjectTorrentFunc mocks the GetObjectTorrent method.
	GetObjectTorrentFunc func(ctx context.Context, params *s3.GetObjectTorrentInput, optFns ...func(*s3.Options)) (*s3.GetObjectTorrentOutput, error)

	// GetPublicAccessBlockFunc mocks the GetPublicAccessBlock method.
	GetPublicAccessBlockFunc func(ctx context.Context, params *s3.GetPublicAccessBlockInput, optFns ...func(*s3.Options)) (*s3.GetPublicAccessBlockOutput, error)

	// HeadBucketFunc mocks the HeadBucket method.
	HeadBucketFunc func(ctx context.Context, params *s3.HeadBucketInput, optFns ...func(*s3.Options)) (*s3.HeadBucketOutput, error)

	// HeadObjectFunc mocks the HeadObject method.
	HeadObjectFunc func(ctx context.Context, params *s3.HeadObjectInput, optFns ...func(*s3.Options)) (*s3.HeadObjectOutput, error)

	// ListBucketAnalyticsConfigurationsFunc mocks the ListBucketAnalyticsConfigurations method.
	ListBucketAnalyticsConfigurationsFunc func(ctx context.Context, params *s3.ListBucketAnalyticsConfigurationsInput, optFns ...func(*s3.Options)) (*s3.ListBucketAnalyticsConfigurationsOutput, error)

	// ListBucketIntelligentTieringConfigurationsFunc mocks the ListBucketIntelligentTieringConfigurations method.
	ListBucketIntelligentTieringConfigurationsFunc func(ctx context.Context, params *s3.ListBucketIntelligentTieringConfigurationsInput, optFns ...func(*s3.Options)) (*s3.ListBucketIntelligentTieringConfigurationsOutput, error)

	// ListBucketInventoryConfigurationsFunc mocks the ListBucketInventoryConfigurations method.
	ListBucketInventoryConfigurationsFunc func(ctx context.Context, params *s3.ListBucketInventoryConfigurationsInput, optFns ...func(*s3.Options)) (*s3.ListBucketInventoryConfigurationsOutput, error)

	// ListBucketMetricsConfigurationsFunc mocks the ListBucketMetricsConfigurations method.
	ListBucketMetricsConfigurationsFunc func(ctx context.Context, params *s3.ListBucketMetricsConfigurationsInput, optFns ...func(*s3.Options)) (*s3.ListBucketMetricsConfigurationsOutput, error)

	// ListBucketsFunc mocks the ListBuckets method.
	ListBucketsFunc func(ctx context.Context, params *s3.ListBucketsInput, optFns ...func(*s3.Options)) (*s3.ListBucketsOutput, error)

	// ListMultipartUploadsFunc mocks the ListMultipartUploads method.
	ListMultipartUploadsFunc func(ctx context.Context, params *s3.ListMultipartUploadsInput, optFns ...func(*s3.Options)) (*s3.ListMultipartUploadsOutput, error)

	// ListObjectVersionsFunc mocks the ListObjectVersions method.
	ListObjectVersionsFunc func(ctx context.Context, params *s3.ListObjectVersionsInput, optFns ...func(*s3.Options)) (*s3.ListObjectVersionsOutput, error)

	// ListObjectsFunc mocks the ListObjects method.
	ListObjectsFunc func(ctx context.Context, params *s3.ListObjectsInput, optFns ...func(*s3.Options)) (*s3.ListObjectsOutput, error)

	// ListObjectsV2Func mocks the ListObjectsV2 method.
	ListObjectsV2Func func(ctx context.Context, params *s3.ListObjectsV2Input, optFns ...func(*s3.Options)) (*s3.ListObjectsV2Output, error)

	// ListPartsFunc mocks the ListParts method.
	ListPartsFunc func(ctx context.Context, params *s3.ListPartsInput, optFns ...func(*s3.Options)) (*s3.ListPartsOutput, error)

	// PutBucketAccelerateConfigurationFunc mocks the PutBucketAccelerateConfiguration method.
	PutBucketAccelerateConfigurationFunc func(ctx context.Context, params *s3.PutBucketAccelerateConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketAccelerateConfigurationOutput, error)

	// PutBucketAclFunc mocks the PutBucketAcl method.
	PutBucketAclFunc func(ctx context.Context, params *s3.PutBucketAclInput, optFns ...func(*s3.Options)) (*s3.PutBucketAclOutput, error)

	// PutBucketAnalyticsConfigurationFunc mocks the PutBucketAnalyticsConfiguration method.
	PutBucketAnalyticsConfigurationFunc func(ctx context.Context, params *s3.PutBucketAnalyticsConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketAnalyticsConfigurationOutput, error)

	// PutBucketCorsFunc mocks the PutBucketCors method.
	PutBucketCorsFunc func(ctx context.Context, params *s3.PutBucketCorsInput, optFns ...func(*s3.Options)) (*s3.PutBucketCorsOutput, error)

	// PutBucketEncryptionFunc mocks the PutBucketEncryption method.
	PutBucketEncryptionFunc func(ctx context.Context, params *s3.PutBucketEncryptionInput, optFns ...func(*s3.Options)) (*s3.PutBucketEncryptionOutput, error)

	// PutBucketIntelligentTieringConfigurationFunc mocks the PutBucketIntelligentTieringConfiguration method.
	PutBucketIntelligentTieringConfigurationFunc func(ctx context.Context, params *s3.PutBucketIntelligentTieringConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketIntelligentTieringConfigurationOutput, error)

	// PutBucketInventoryConfigurationFunc mocks the PutBucketInventoryConfiguration method.
	PutBucketInventoryConfigurationFunc func(ctx context.Context, params *s3.PutBucketInventoryConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketInventoryConfigurationOutput, error)

	// PutBucketLifecycleConfigurationFunc mocks the PutBucketLifecycleConfiguration method.
	PutBucketLifecycleConfigurationFunc func(ctx context.Context, params *s3.PutBucketLifecycleConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketLifecycleConfigurationOutput, error)

	// PutBucketLoggingFunc mocks the PutBucketLogging method.
	PutBucketLoggingFunc func(ctx context.Context, params *s3.PutBucketLoggingInput, optFns ...func(*s3.Options)) (*s3.PutBucketLoggingOutput, error)

	// PutBucketMetricsConfigurationFunc mocks the PutBucketMetricsConfiguration method.
	PutBucketMetricsConfigurationFunc func(ctx context.Context, params *s3.PutBucketMetricsConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketMetricsConfigurationOutput, error)

	// PutBucketNotificationConfigurationFunc mocks the PutBucketNotificationConfiguration method.
	PutBucketNotificationConfigurationFunc func(ctx context.Context, params *s3.PutBucketNotificationConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketNotificationConfigurationOutput, error)

	// PutBucketOwnershipControlsFunc mocks the PutBucketOwnershipControls method.
	PutBucketOwnershipControlsFunc func(ctx context.Context, params *s3.PutBucketOwnershipControlsInput, optFns ...func(*s3.Options)) (*s3.PutBucketOwnershipControlsOutput, error)

	// PutBucketPolicyFunc mocks the PutBucketPolicy method.
	PutBucketPolicyFunc func(ctx context.Context, params *s3.PutBucketPolicyInput, optFns ...func(*s3.Options)) (*s3.PutBucketPolicyOutput, error)

	// PutBucketReplicationFunc mocks the PutBucketReplication method.
	PutBucketReplicationFunc func(ctx context.Context, params *s3.PutBucketReplicationInput, optFns ...func(*s3.Options)) (*s3.PutBucketReplicationOutput, error)

	// PutBucketRequestPaymentFunc mocks the PutBucketRequestPayment method.
	PutBucketRequestPaymentFunc func(ctx context.Context, params *s3.PutBucketRequestPaymentInput, optFns ...func(*s3.Options)) (*s3.PutBucketRequestPaymentOutput, error)

	// PutBucketTaggingFunc mocks the PutBucketTagging method.
	PutBucketTaggingFunc func(ctx context.Context, params *s3.PutBucketTaggingInput, optFns ...func(*s3.Options)) (*s3.PutBucketTaggingOutput, error)

	// PutBucketVersioningFunc mocks the PutBucketVersioning method.
	PutBucketVersioningFunc func(ctx context.Context, params *s3.PutBucketVersioningInput, optFns ...func(*s3.Options)) (*s3.PutBucketVersioningOutput, error)

	// PutBucketWebsiteFunc mocks the PutBucketWebsite method.
	PutBucketWebsiteFunc func(ctx context.Context, params *s3.PutBucketWebsiteInput, optFns ...func(*s3.Options)) (*s3.PutBucketWebsiteOutput, error)

	// PutObjectFunc mocks the PutObject method.
	PutObjectFunc func(ctx context.Context, params *s3.PutObjectInput, optFns ...func(*s3.Options)) (*s3.PutObjectOutput, error)

	// PutObjectAclFunc mocks the PutObjectAcl method.
	PutObjectAclFunc func(ctx context.Context, params *s3.PutObjectAclInput, optFns ...func(*s3.Options)) (*s3.PutObjectAclOutput, error)

	// PutObjectLegalHoldFunc mocks the PutObjectLegalHold method.
	PutObjectLegalHoldFunc func(ctx context.Context, params *s3.PutObjectLegalHoldInput, optFns ...func(*s3.Options)) (*s3.PutObjectLegalHoldOutput, error)

	// PutObjectLockConfigurationFunc mocks the PutObjectLockConfiguration method.
	PutObjectLockConfigurationFunc func(ctx context.Context, params *s3.PutObjectLockConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutObjectLockConfigurationOutput, error)

	// PutObjectRetentionFunc mocks the PutObjectRetention method.
	PutObjectRetentionFunc func(ctx context.Context, params *s3.PutObjectRetentionInput, optFns ...func(*s3.Options)) (*s3.PutObjectRetentionOutput, error)

	// PutObjectTaggingFunc mocks the PutObjectTagging method.
	PutObjectTaggingFunc func(ctx context.Context, params *s3.PutObjectTaggingInput, optFns ...func(*s3.Options)) (*s3.PutObjectTaggingOutput, error)

	// PutPublicAccessBlockFunc mocks the PutPublicAccessBlock method.
	PutPublicAccessBlockFunc func(ctx context.Context, params *s3.PutPublicAccessBlockInput, optFns ...func(*s3.Options)) (*s3.PutPublicAccessBlockOutput, error)

	// RestoreObjectFunc mocks the RestoreObject method.
	RestoreObjectFunc func(ctx context.Context, params *s3.RestoreObjectInput, optFns ...func(*s3.Options)) (*s3.RestoreObjectOutput, error)

	// SelectObjectContentFunc mocks the SelectObjectContent method.
	SelectObjectContentFunc func(ctx context.Context, params *s3.SelectObjectContentInput, optFns ...func(*s3.Options)) (*s3.SelectObjectContentOutput, error)

	// UploadPartFunc mocks the UploadPart method.
	UploadPartFunc func(ctx context.Context, params *s3.UploadPartInput, optFns ...func(*s3.Options)) (*s3.UploadPartOutput, error)

	// UploadPartCopyFunc mocks the UploadPartCopy method.
	UploadPartCopyFunc func(ctx context.Context, params *s3.UploadPartCopyInput, optFns ...func(*s3.Options)) (*s3.UploadPartCopyOutput, error)

	// WriteGetObjectResponseFunc mocks the WriteGetObjectResponse method.
	WriteGetObjectResponseFunc func(ctx context.Context, params *s3.WriteGetObjectResponseInput, optFns ...func(*s3.Options)) (*s3.WriteGetObjectResponseOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// AbortMultipartUpload holds details about calls to the AbortMultipartUpload method.
		AbortMultipartUpload []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.AbortMultipartUploadInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// CompleteMultipartUpload holds details about calls to the CompleteMultipartUpload method.
		CompleteMultipartUpload []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.CompleteMultipartUploadInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// CopyObject holds details about calls to the CopyObject method.
		CopyObject []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.CopyObjectInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// CreateBucket holds details about calls to the CreateBucket method.
		CreateBucket []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.CreateBucketInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// CreateMultipartUpload holds details about calls to the CreateMultipartUpload method.
		CreateMultipartUpload []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.CreateMultipartUploadInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// DeleteBucket holds details about calls to the DeleteBucket method.
		DeleteBucket []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.DeleteBucketInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// DeleteBucketAnalyticsConfiguration holds details about calls to the DeleteBucketAnalyticsConfiguration method.
		DeleteBucketAnalyticsConfiguration []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.DeleteBucketAnalyticsConfigurationInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// DeleteBucketCors holds details about calls to the DeleteBucketCors method.
		DeleteBucketCors []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.DeleteBucketCorsInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// DeleteBucketEncryption holds details about calls to the DeleteBucketEncryption method.
		DeleteBucketEncryption []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.DeleteBucketEncryptionInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// DeleteBucketIntelligentTieringConfiguration holds details about calls to the DeleteBucketIntelligentTieringConfiguration method.
		DeleteBucketIntelligentTieringConfiguration []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.DeleteBucketIntelligentTieringConfigurationInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// DeleteBucketInventoryConfiguration holds details about calls to the DeleteBucketInventoryConfiguration method.
		DeleteBucketInventoryConfiguration []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.DeleteBucketInventoryConfigurationInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// DeleteBucketLifecycle holds details about calls to the DeleteBucketLifecycle method.
		DeleteBucketLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.DeleteBucketLifecycleInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// DeleteBucketMetricsConfiguration holds details about calls to the DeleteBucketMetricsConfiguration method.
		DeleteBucketMetricsConfiguration []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.DeleteBucketMetricsConfigurationInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// DeleteBucketOwnershipControls holds details about calls to the DeleteBucketOwnershipControls method.
		DeleteBucketOwnershipControls []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.DeleteBucketOwnershipControlsInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// DeleteBucketPolicy holds details about calls to the DeleteBucketPolicy method.
		DeleteBucketPolicy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.DeleteBucketPolicyInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// DeleteBucketReplication holds details about calls to the DeleteBucketReplication method.
		DeleteBucketReplication []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.DeleteBucketReplicationInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// DeleteBucketTagging holds details about calls to the DeleteBucketTagging method.
		DeleteBucketTagging []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.DeleteBucketTaggingInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// DeleteBucketWebsite holds details about calls to the DeleteBucketWebsite method.
		DeleteBucketWebsite []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.DeleteBucketWebsiteInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// DeleteObject holds details about calls to the DeleteObject method.
		DeleteObject []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.DeleteObjectInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// DeleteObjectTagging holds details about calls to the DeleteObjectTagging method.
		DeleteObjectTagging []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.DeleteObjectTaggingInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// DeleteObjects holds details about calls to the DeleteObjects method.
		DeleteObjects []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.DeleteObjectsInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// DeletePublicAccessBlock holds details about calls to the DeletePublicAccessBlock method.
		DeletePublicAccessBlock []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.DeletePublicAccessBlockInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// GetBucketAccelerateConfiguration holds details about calls to the GetBucketAccelerateConfiguration method.
		GetBucketAccelerateConfiguration []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.GetBucketAccelerateConfigurationInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// GetBucketAcl holds details about calls to the GetBucketAcl method.
		GetBucketAcl []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.GetBucketAclInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// GetBucketAnalyticsConfiguration holds details about calls to the GetBucketAnalyticsConfiguration method.
		GetBucketAnalyticsConfiguration []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.GetBucketAnalyticsConfigurationInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// GetBucketCors holds details about calls to the GetBucketCors method.
		GetBucketCors []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.GetBucketCorsInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// GetBucketEncryption holds details about calls to the GetBucketEncryption method.
		GetBucketEncryption []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.GetBucketEncryptionInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// GetBucketIntelligentTieringConfiguration holds details about calls to the GetBucketIntelligentTieringConfiguration method.
		GetBucketIntelligentTieringConfiguration []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.GetBucketIntelligentTieringConfigurationInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// GetBucketInventoryConfiguration holds details about calls to the GetBucketInventoryConfiguration method.
		GetBucketInventoryConfiguration []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.GetBucketInventoryConfigurationInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// GetBucketLifecycleConfiguration holds details about calls to the GetBucketLifecycleConfiguration method.
		GetBucketLifecycleConfiguration []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.GetBucketLifecycleConfigurationInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// GetBucketLocation holds details about calls to the GetBucketLocation method.
		GetBucketLocation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.GetBucketLocationInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// GetBucketLogging holds details about calls to the GetBucketLogging method.
		GetBucketLogging []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.GetBucketLoggingInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// GetBucketMetricsConfiguration holds details about calls to the GetBucketMetricsConfiguration method.
		GetBucketMetricsConfiguration []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.GetBucketMetricsConfigurationInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// GetBucketNotificationConfiguration holds details about calls to the GetBucketNotificationConfiguration method.
		GetBucketNotificationConfiguration []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.GetBucketNotificationConfigurationInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// GetBucketOwnershipControls holds details about calls to the GetBucketOwnershipControls method.
		GetBucketOwnershipControls []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.GetBucketOwnershipControlsInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// GetBucketPolicy holds details about calls to the GetBucketPolicy method.
		GetBucketPolicy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.GetBucketPolicyInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// GetBucketPolicyStatus holds details about calls to the GetBucketPolicyStatus method.
		GetBucketPolicyStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.GetBucketPolicyStatusInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// GetBucketReplication holds details about calls to the GetBucketReplication method.
		GetBucketReplication []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.GetBucketReplicationInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// GetBucketRequestPayment holds details about calls to the GetBucketRequestPayment method.
		GetBucketRequestPayment []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.GetBucketRequestPaymentInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// GetBucketTagging holds details about calls to the GetBucketTagging method.
		GetBucketTagging []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.GetBucketTaggingInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// GetBucketVersioning holds details about calls to the GetBucketVersioning method.
		GetBucketVersioning []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.GetBucketVersioningInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// GetBucketWebsite holds details about calls to the GetBucketWebsite method.
		GetBucketWebsite []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.GetBucketWebsiteInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// GetObject holds details about calls to the GetObject method.
		GetObject []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.GetObjectInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// GetObjectAcl holds details about calls to the GetObjectAcl method.
		GetObjectAcl []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.GetObjectAclInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// GetObjectAttributes holds details about calls to the GetObjectAttributes method.
		GetObjectAttributes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.GetObjectAttributesInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// GetObjectLegalHold holds details about calls to the GetObjectLegalHold method.
		GetObjectLegalHold []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.GetObjectLegalHoldInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// GetObjectLockConfiguration holds details about calls to the GetObjectLockConfiguration method.
		GetObjectLockConfiguration []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.GetObjectLockConfigurationInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// GetObjectRetention holds details about calls to the GetObjectRetention method.
		GetObjectRetention []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.GetObjectRetentionInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// GetObjectTagging holds details about calls to the GetObjectTagging method.
		GetObjectTagging []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.GetObjectTaggingInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// GetObjectTorrent holds details about calls to the GetObjectTorrent method.
		GetObjectTorrent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.GetObjectTorrentInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// GetPublicAccessBlock holds details about calls to the GetPublicAccessBlock method.
		GetPublicAccessBlock []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.GetPublicAccessBlockInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// HeadBucket holds details about calls to the HeadBucket method.
		HeadBucket []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.HeadBucketInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// HeadObject holds details about calls to the HeadObject method.
		HeadObject []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.HeadObjectInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// ListBucketAnalyticsConfigurations holds details about calls to the ListBucketAnalyticsConfigurations method.
		ListBucketAnalyticsConfigurations []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.ListBucketAnalyticsConfigurationsInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// ListBucketIntelligentTieringConfigurations holds details about calls to the ListBucketIntelligentTieringConfigurations method.
		ListBucketIntelligentTieringConfigurations []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.ListBucketIntelligentTieringConfigurationsInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// ListBucketInventoryConfigurations holds details about calls to the ListBucketInventoryConfigurations method.
		ListBucketInventoryConfigurations []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.ListBucketInventoryConfigurationsInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// ListBucketMetricsConfigurations holds details about calls to the ListBucketMetricsConfigurations method.
		ListBucketMetricsConfigurations []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.ListBucketMetricsConfigurationsInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// ListBuckets holds details about calls to the ListBuckets method.
		ListBuckets []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.ListBucketsInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// ListMultipartUploads holds details about calls to the ListMultipartUploads method.
		ListMultipartUploads []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.ListMultipartUploadsInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// ListObjectVersions holds details about calls to the ListObjectVersions method.
		ListObjectVersions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.ListObjectVersionsInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// ListObjects holds details about calls to the ListObjects method.
		ListObjects []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.ListObjectsInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// ListObjectsV2 holds details about calls to the ListObjectsV2 method.
		ListObjectsV2 []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.ListObjectsV2Input
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// ListParts holds details about calls to the ListParts method.
		ListParts []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.ListPartsInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// PutBucketAccelerateConfiguration holds details about calls to the PutBucketAccelerateConfiguration method.
		PutBucketAccelerateConfiguration []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.PutBucketAccelerateConfigurationInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// PutBucketAcl holds details about calls to the PutBucketAcl method.
		PutBucketAcl []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.PutBucketAclInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// PutBucketAnalyticsConfiguration holds details about calls to the PutBucketAnalyticsConfiguration method.
		PutBucketAnalyticsConfiguration []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.PutBucketAnalyticsConfigurationInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// PutBucketCors holds details about calls to the PutBucketCors method.
		PutBucketCors []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.PutBucketCorsInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// PutBucketEncryption holds details about calls to the PutBucketEncryption method.
		PutBucketEncryption []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.PutBucketEncryptionInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// PutBucketIntelligentTieringConfiguration holds details about calls to the PutBucketIntelligentTieringConfiguration method.
		PutBucketIntelligentTieringConfiguration []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.PutBucketIntelligentTieringConfigurationInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// PutBucketInventoryConfiguration holds details about calls to the PutBucketInventoryConfiguration method.
		PutBucketInventoryConfiguration []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.PutBucketInventoryConfigurationInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// PutBucketLifecycleConfiguration holds details about calls to the PutBucketLifecycleConfiguration method.
		PutBucketLifecycleConfiguration []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.PutBucketLifecycleConfigurationInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// PutBucketLogging holds details about calls to the PutBucketLogging method.
		PutBucketLogging []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.PutBucketLoggingInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// PutBucketMetricsConfiguration holds details about calls to the PutBucketMetricsConfiguration method.
		PutBucketMetricsConfiguration []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.PutBucketMetricsConfigurationInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// PutBucketNotificationConfiguration holds details about calls to the PutBucketNotificationConfiguration method.
		PutBucketNotificationConfiguration []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.PutBucketNotificationConfigurationInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// PutBucketOwnershipControls holds details about calls to the PutBucketOwnershipControls method.
		PutBucketOwnershipControls []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.PutBucketOwnershipControlsInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// PutBucketPolicy holds details about calls to the PutBucketPolicy method.
		PutBucketPolicy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.PutBucketPolicyInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// PutBucketReplication holds details about calls to the PutBucketReplication method.
		PutBucketReplication []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.PutBucketReplicationInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// PutBucketRequestPayment holds details about calls to the PutBucketRequestPayment method.
		PutBucketRequestPayment []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.PutBucketRequestPaymentInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// PutBucketTagging holds details about calls to the PutBucketTagging method.
		PutBucketTagging []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.PutBucketTaggingInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// PutBucketVersioning holds details about calls to the PutBucketVersioning method.
		PutBucketVersioning []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.PutBucketVersioningInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// PutBucketWebsite holds details about calls to the PutBucketWebsite method.
		PutBucketWebsite []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.PutBucketWebsiteInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// PutObject holds details about calls to the PutObject method.
		PutObject []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.PutObjectInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// PutObjectAcl holds details about calls to the PutObjectAcl method.
		PutObjectAcl []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.PutObjectAclInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// PutObjectLegalHold holds details about calls to the PutObjectLegalHold method.
		PutObjectLegalHold []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.PutObjectLegalHoldInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// PutObjectLockConfiguration holds details about calls to the PutObjectLockConfiguration method.
		PutObjectLockConfiguration []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.PutObjectLockConfigurationInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// PutObjectRetention holds details about calls to the PutObjectRetention method.
		PutObjectRetention []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.PutObjectRetentionInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// PutObjectTagging holds details about calls to the PutObjectTagging method.
		PutObjectTagging []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.PutObjectTaggingInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// PutPublicAccessBlock holds details about calls to the PutPublicAccessBlock method.
		PutPublicAccessBlock []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.PutPublicAccessBlockInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// RestoreObject holds details about calls to the RestoreObject method.
		RestoreObject []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.RestoreObjectInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// SelectObjectContent holds details about calls to the SelectObjectContent method.
		SelectObjectContent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.SelectObjectContentInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// UploadPart holds details about calls to the UploadPart method.
		UploadPart []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.UploadPartInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// UploadPartCopy holds details about calls to the UploadPartCopy method.
		UploadPartCopy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.UploadPartCopyInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
		// WriteGetObjectResponse holds details about calls to the WriteGetObjectResponse method.
		WriteGetObjectResponse []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *s3.WriteGetObjectResponseInput
			// OptFns is the optFns argument value.
			OptFns []func(*s3.Options)
		}
	}
	lockAbortMultipartUpload                        sync.RWMutex
	lockCompleteMultipartUpload                     sync.RWMutex
	lockCopyObject                                  sync.RWMutex
	lockCreateBucket                                sync.RWMutex
	lockCreateMultipartUpload                       sync.RWMutex
	lockDeleteBucket                                sync.RWMutex
	lockDeleteBucketAnalyticsConfiguration          sync.RWMutex
	lockDeleteBucketCors                            sync.RWMutex
	lockDeleteBucketEncryption                      sync.RWMutex
	lockDeleteBucketIntelligentTieringConfiguration sync.RWMutex
	lockDeleteBucketInventoryConfiguration          sync.RWMutex
	lockDeleteBucketLifecycle                       sync.RWMutex
	lockDeleteBucketMetricsConfiguration            sync.RWMutex
	lockDeleteBucketOwnershipControls               sync.RWMutex
	lockDeleteBucketPolicy                          sync.RWMutex
	lockDeleteBucketReplication                     sync.RWMutex
	lockDeleteBucketTagging                         sync.RWMutex
	lockDeleteBucketWebsite                         sync.RWMutex
	lockDeleteObject                                sync.RWMutex
	lockDeleteObjectTagging                         sync.RWMutex
	lockDeleteObjects                               sync.RWMutex
	lockDeletePublicAccessBlock                     sync.RWMutex
	lockGetBucketAccelerateConfiguration            sync.RWMutex
	lockGetBucketAcl                                sync.RWMutex
	lockGetBucketAnalyticsConfiguration             sync.RWMutex
	lockGetBucketCors                               sync.RWMutex
	lockGetBucketEncryption                         sync.RWMutex
	lockGetBucketIntelligentTieringConfiguration    sync.RWMutex
	lockGetBucketInventoryConfiguration             sync.RWMutex
	lockGetBucketLifecycleConfiguration             sync.RWMutex
	lockGetBucketLocation                           sync.RWMutex
	lockGetBucketLogging                            sync.RWMutex
	lockGetBucketMetricsConfiguration               sync.RWMutex
	lockGetBucketNotificationConfiguration          sync.RWMutex
	lockGetBucketOwnershipControls                  sync.RWMutex
	lockGetBucketPolicy                             sync.RWMutex
	lockGetBucketPolicyStatus                       sync.RWMutex
	lockGetBucketReplication                        sync.RWMutex
	lockGetBucketRequestPayment                     sync.RWMutex
	lockGetBucketTagging                            sync.RWMutex
	lockGetBucketVersioning                         sync.RWMutex
	lockGetBucketWebsite                            sync.RWMutex
	lockGetObject                                   sync.RWMutex
	lockGetObjectAcl                                sync.RWMutex
	lockGetObjectAttributes                         sync.RWMutex
	lockGetObjectLegalHold                          sync.RWMutex
	lockGetObjectLockConfiguration                  sync.RWMutex
	lockGetObjectRetention                          sync.RWMutex
	lockGetObjectTagging                            sync.RWMutex
	lockGetObjectTorrent                            sync.RWMutex
	lockGetPublicAccessBlock                        sync.RWMutex
	lockHeadBucket                                  sync.RWMutex
	lockHeadObject                                  sync.RWMutex
	lockListBucketAnalyticsConfigurations           sync.RWMutex
	lockListBucketIntelligentTieringConfigurations  sync.RWMutex
	lockListBucketInventoryConfigurations           sync.RWMutex
	lockListBucketMetricsConfigurations             sync.RWMutex
	lockListBuckets                                 sync.RWMutex
	lockListMultipartUploads                        sync.RWMutex
	lockListObjectVersions                          sync.RWMutex
	lockListObjects                                 sync.RWMutex
	lockListObjectsV2                               sync.RWMutex
	lockListParts                                   sync.RWMutex
	lockPutBucketAccelerateConfiguration            sync.RWMutex
	lockPutBucketAcl                                sync.RWMutex
	lockPutBucketAnalyticsConfiguration             sync.RWMutex
	lockPutBucketCors                               sync.RWMutex
	lockPutBucketEncryption                         sync.RWMutex
	lockPutBucketIntelligentTieringConfiguration    sync.RWMutex
	lockPutBucketInventoryConfiguration             sync.RWMutex
	lockPutBucketLifecycleConfiguration             sync.RWMutex
	lockPutBucketLogging                            sync.RWMutex
	lockPutBucketMetricsConfiguration               sync.RWMutex
	lockPutBucketNotificationConfiguration          sync.RWMutex
	lockPutBucketOwnershipControls                  sync.RWMutex
	lockPutBucketPolicy                             sync.RWMutex
	lockPutBucketReplication                        sync.RWMutex
	lockPutBucketRequestPayment                     sync.RWMutex
	lockPutBucketTagging                            sync.RWMutex
	lockPutBucketVersioning                         sync.RWMutex
	lockPutBucketWebsite                            sync.RWMutex
	lockPutObject                                   sync.RWMutex
	lockPutObjectAcl                                sync.RWMutex
	lockPutObjectLegalHold                          sync.RWMutex
	lockPutObjectLockConfiguration                  sync.RWMutex
	lockPutObjectRetention                          sync.RWMutex
	lockPutObjectTagging                            sync.RWMutex
	lockPutPublicAccessBlock                        sync.RWMutex
	lockRestoreObject                               sync.RWMutex
	lockSelectObjectContent                         sync.RWMutex
	lockUploadPart                                  sync.RWMutex
	lockUploadPartCopy                              sync.RWMutex
	lockWriteGetObjectResponse                      sync.RWMutex
}

// AbortMultipartUpload calls AbortMultipartUploadFunc.
func (mock *ClientMock) AbortMultipartUpload(ctx context.Context, params *s3.AbortMultipartUploadInput, optFns ...func(*s3.Options)) (*s3.AbortMultipartUploadOutput, error) {
	if mock.AbortMultipartUploadFunc == nil {
		panic("ClientMock.AbortMultipartUploadFunc: method is nil but Client.AbortMultipartUpload was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.AbortMultipartUploadInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockAbortMultipartUpload.Lock()
	mock.calls.AbortMultipartUpload = append(mock.calls.AbortMultipartUpload, callInfo)
	mock.lockAbortMultipartUpload.Unlock()
	return mock.AbortMultipartUploadFunc(ctx, params, optFns...)
}

// AbortMultipartUploadCalls gets all the calls that were made to AbortMultipartUpload.
// Check the length with:
//
//	len(mockedClient.AbortMultipartUploadCalls())
func (mock *ClientMock) AbortMultipartUploadCalls() []struct {
	Ctx    context.Context
	Params *s3.AbortMultipartUploadInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.AbortMultipartUploadInput
		OptFns []func(*s3.Options)
	}
	mock.lockAbortMultipartUpload.RLock()
	calls = mock.calls.AbortMultipartUpload
	mock.lockAbortMultipartUpload.RUnlock()
	return calls
}

// CompleteMultipartUpload calls CompleteMultipartUploadFunc.
func (mock *ClientMock) CompleteMultipartUpload(ctx context.Context, params *s3.CompleteMultipartUploadInput, optFns ...func(*s3.Options)) (*s3.CompleteMultipartUploadOutput, error) {
	if mock.CompleteMultipartUploadFunc == nil {
		panic("ClientMock.CompleteMultipartUploadFunc: method is nil but Client.CompleteMultipartUpload was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.CompleteMultipartUploadInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCompleteMultipartUpload.Lock()
	mock.calls.CompleteMultipartUpload = append(mock.calls.CompleteMultipartUpload, callInfo)
	mock.lockCompleteMultipartUpload.Unlock()
	return mock.CompleteMultipartUploadFunc(ctx, params, optFns...)
}

// CompleteMultipartUploadCalls gets all the calls that were made to CompleteMultipartUpload.
// Check the length with:
//
//	len(mockedClient.CompleteMultipartUploadCalls())
func (mock *ClientMock) CompleteMultipartUploadCalls() []struct {
	Ctx    context.Context
	Params *s3.CompleteMultipartUploadInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.CompleteMultipartUploadInput
		OptFns []func(*s3.Options)
	}
	mock.lockCompleteMultipartUpload.RLock()
	calls = mock.calls.CompleteMultipartUpload
	mock.lockCompleteMultipartUpload.RUnlock()
	return calls
}

// CopyObject calls CopyObjectFunc.
func (mock *ClientMock) CopyObject(ctx context.Context, params *s3.CopyObjectInput, optFns ...func(*s3.Options)) (*s3.CopyObjectOutput, error) {
	if mock.CopyObjectFunc == nil {
		panic("ClientMock.CopyObjectFunc: method is nil but Client.CopyObject was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.CopyObjectInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCopyObject.Lock()
	mock.calls.CopyObject = append(mock.calls.CopyObject, callInfo)
	mock.lockCopyObject.Unlock()
	return mock.CopyObjectFunc(ctx, params, optFns...)
}

// CopyObjectCalls gets all the calls that were made to CopyObject.
// Check the length with:
//
//	len(mockedClient.CopyObjectCalls())
func (mock *ClientMock) CopyObjectCalls() []struct {
	Ctx    context.Context
	Params *s3.CopyObjectInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.CopyObjectInput
		OptFns []func(*s3.Options)
	}
	mock.lockCopyObject.RLock()
	calls = mock.calls.CopyObject
	mock.lockCopyObject.RUnlock()
	return calls
}

// CreateBucket calls CreateBucketFunc.
func (mock *ClientMock) CreateBucket(ctx context.Context, params *s3.CreateBucketInput, optFns ...func(*s3.Options)) (*s3.CreateBucketOutput, error) {
	if mock.CreateBucketFunc == nil {
		panic("ClientMock.CreateBucketFunc: method is nil but Client.CreateBucket was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.CreateBucketInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateBucket.Lock()
	mock.calls.CreateBucket = append(mock.calls.CreateBucket, callInfo)
	mock.lockCreateBucket.Unlock()
	return mock.CreateBucketFunc(ctx, params, optFns...)
}

// CreateBucketCalls gets all the calls that were made to CreateBucket.
// Check the length with:
//
//	len(mockedClient.CreateBucketCalls())
func (mock *ClientMock) CreateBucketCalls() []struct {
	Ctx    context.Context
	Params *s3.CreateBucketInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.CreateBucketInput
		OptFns []func(*s3.Options)
	}
	mock.lockCreateBucket.RLock()
	calls = mock.calls.CreateBucket
	mock.lockCreateBucket.RUnlock()
	return calls
}

// CreateMultipartUpload calls CreateMultipartUploadFunc.
func (mock *ClientMock) CreateMultipartUpload(ctx context.Context, params *s3.CreateMultipartUploadInput, optFns ...func(*s3.Options)) (*s3.CreateMultipartUploadOutput, error) {
	if mock.CreateMultipartUploadFunc == nil {
		panic("ClientMock.CreateMultipartUploadFunc: method is nil but Client.CreateMultipartUpload was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.CreateMultipartUploadInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateMultipartUpload.Lock()
	mock.calls.CreateMultipartUpload = append(mock.calls.CreateMultipartUpload, callInfo)
	mock.lockCreateMultipartUpload.Unlock()
	return mock.CreateMultipartUploadFunc(ctx, params, optFns...)
}

// CreateMultipartUploadCalls gets all the calls that were made to CreateMultipartUpload.
// Check the length with:
//
//	len(mockedClient.CreateMultipartUploadCalls())
func (mock *ClientMock) CreateMultipartUploadCalls() []struct {
	Ctx    context.Context
	Params *s3.CreateMultipartUploadInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.CreateMultipartUploadInput
		OptFns []func(*s3.Options)
	}
	mock.lockCreateMultipartUpload.RLock()
	calls = mock.calls.CreateMultipartUpload
	mock.lockCreateMultipartUpload.RUnlock()
	return calls
}

// DeleteBucket calls DeleteBucketFunc.
func (mock *ClientMock) DeleteBucket(ctx context.Context, params *s3.DeleteBucketInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketOutput, error) {
	if mock.DeleteBucketFunc == nil {
		panic("ClientMock.DeleteBucketFunc: method is nil but Client.DeleteBucket was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.DeleteBucketInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteBucket.Lock()
	mock.calls.DeleteBucket = append(mock.calls.DeleteBucket, callInfo)
	mock.lockDeleteBucket.Unlock()
	return mock.DeleteBucketFunc(ctx, params, optFns...)
}

// DeleteBucketCalls gets all the calls that were made to DeleteBucket.
// Check the length with:
//
//	len(mockedClient.DeleteBucketCalls())
func (mock *ClientMock) DeleteBucketCalls() []struct {
	Ctx    context.Context
	Params *s3.DeleteBucketInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.DeleteBucketInput
		OptFns []func(*s3.Options)
	}
	mock.lockDeleteBucket.RLock()
	calls = mock.calls.DeleteBucket
	mock.lockDeleteBucket.RUnlock()
	return calls
}

// DeleteBucketAnalyticsConfiguration calls DeleteBucketAnalyticsConfigurationFunc.
func (mock *ClientMock) DeleteBucketAnalyticsConfiguration(ctx context.Context, params *s3.DeleteBucketAnalyticsConfigurationInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketAnalyticsConfigurationOutput, error) {
	if mock.DeleteBucketAnalyticsConfigurationFunc == nil {
		panic("ClientMock.DeleteBucketAnalyticsConfigurationFunc: method is nil but Client.DeleteBucketAnalyticsConfiguration was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.DeleteBucketAnalyticsConfigurationInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteBucketAnalyticsConfiguration.Lock()
	mock.calls.DeleteBucketAnalyticsConfiguration = append(mock.calls.DeleteBucketAnalyticsConfiguration, callInfo)
	mock.lockDeleteBucketAnalyticsConfiguration.Unlock()
	return mock.DeleteBucketAnalyticsConfigurationFunc(ctx, params, optFns...)
}

// DeleteBucketAnalyticsConfigurationCalls gets all the calls that were made to DeleteBucketAnalyticsConfiguration.
// Check the length with:
//
//	len(mockedClient.DeleteBucketAnalyticsConfigurationCalls())
func (mock *ClientMock) DeleteBucketAnalyticsConfigurationCalls() []struct {
	Ctx    context.Context
	Params *s3.DeleteBucketAnalyticsConfigurationInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.DeleteBucketAnalyticsConfigurationInput
		OptFns []func(*s3.Options)
	}
	mock.lockDeleteBucketAnalyticsConfiguration.RLock()
	calls = mock.calls.DeleteBucketAnalyticsConfiguration
	mock.lockDeleteBucketAnalyticsConfiguration.RUnlock()
	return calls
}

// DeleteBucketCors calls DeleteBucketCorsFunc.
func (mock *ClientMock) DeleteBucketCors(ctx context.Context, params *s3.DeleteBucketCorsInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketCorsOutput, error) {
	if mock.DeleteBucketCorsFunc == nil {
		panic("ClientMock.DeleteBucketCorsFunc: method is nil but Client.DeleteBucketCors was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.DeleteBucketCorsInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteBucketCors.Lock()
	mock.calls.DeleteBucketCors = append(mock.calls.DeleteBucketCors, callInfo)
	mock.lockDeleteBucketCors.Unlock()
	return mock.DeleteBucketCorsFunc(ctx, params, optFns...)
}

// DeleteBucketCorsCalls gets all the calls that were made to DeleteBucketCors.
// Check the length with:
//
//	len(mockedClient.DeleteBucketCorsCalls())
func (mock *ClientMock) DeleteBucketCorsCalls() []struct {
	Ctx    context.Context
	Params *s3.DeleteBucketCorsInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.DeleteBucketCorsInput
		OptFns []func(*s3.Options)
	}
	mock.lockDeleteBucketCors.RLock()
	calls = mock.calls.DeleteBucketCors
	mock.lockDeleteBucketCors.RUnlock()
	return calls
}

// DeleteBucketEncryption calls DeleteBucketEncryptionFunc.
func (mock *ClientMock) DeleteBucketEncryption(ctx context.Context, params *s3.DeleteBucketEncryptionInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketEncryptionOutput, error) {
	if mock.DeleteBucketEncryptionFunc == nil {
		panic("ClientMock.DeleteBucketEncryptionFunc: method is nil but Client.DeleteBucketEncryption was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.DeleteBucketEncryptionInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteBucketEncryption.Lock()
	mock.calls.DeleteBucketEncryption = append(mock.calls.DeleteBucketEncryption, callInfo)
	mock.lockDeleteBucketEncryption.Unlock()
	return mock.DeleteBucketEncryptionFunc(ctx, params, optFns...)
}

// DeleteBucketEncryptionCalls gets all the calls that were made to DeleteBucketEncryption.
// Check the length with:
//
//	len(mockedClient.DeleteBucketEncryptionCalls())
func (mock *ClientMock) DeleteBucketEncryptionCalls() []struct {
	Ctx    context.Context
	Params *s3.DeleteBucketEncryptionInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.DeleteBucketEncryptionInput
		OptFns []func(*s3.Options)
	}
	mock.lockDeleteBucketEncryption.RLock()
	calls = mock.calls.DeleteBucketEncryption
	mock.lockDeleteBucketEncryption.RUnlock()
	return calls
}

// DeleteBucketIntelligentTieringConfiguration calls DeleteBucketIntelligentTieringConfigurationFunc.
func (mock *ClientMock) DeleteBucketIntelligentTieringConfiguration(ctx context.Context, params *s3.DeleteBucketIntelligentTieringConfigurationInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketIntelligentTieringConfigurationOutput, error) {
	if mock.DeleteBucketIntelligentTieringConfigurationFunc == nil {
		panic("ClientMock.DeleteBucketIntelligentTieringConfigurationFunc: method is nil but Client.DeleteBucketIntelligentTieringConfiguration was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.DeleteBucketIntelligentTieringConfigurationInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteBucketIntelligentTieringConfiguration.Lock()
	mock.calls.DeleteBucketIntelligentTieringConfiguration = append(mock.calls.DeleteBucketIntelligentTieringConfiguration, callInfo)
	mock.lockDeleteBucketIntelligentTieringConfiguration.Unlock()
	return mock.DeleteBucketIntelligentTieringConfigurationFunc(ctx, params, optFns...)
}

// DeleteBucketIntelligentTieringConfigurationCalls gets all the calls that were made to DeleteBucketIntelligentTieringConfiguration.
// Check the length with:
//
//	len(mockedClient.DeleteBucketIntelligentTieringConfigurationCalls())
func (mock *ClientMock) DeleteBucketIntelligentTieringConfigurationCalls() []struct {
	Ctx    context.Context
	Params *s3.DeleteBucketIntelligentTieringConfigurationInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.DeleteBucketIntelligentTieringConfigurationInput
		OptFns []func(*s3.Options)
	}
	mock.lockDeleteBucketIntelligentTieringConfiguration.RLock()
	calls = mock.calls.DeleteBucketIntelligentTieringConfiguration
	mock.lockDeleteBucketIntelligentTieringConfiguration.RUnlock()
	return calls
}

// DeleteBucketInventoryConfiguration calls DeleteBucketInventoryConfigurationFunc.
func (mock *ClientMock) DeleteBucketInventoryConfiguration(ctx context.Context, params *s3.DeleteBucketInventoryConfigurationInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketInventoryConfigurationOutput, error) {
	if mock.DeleteBucketInventoryConfigurationFunc == nil {
		panic("ClientMock.DeleteBucketInventoryConfigurationFunc: method is nil but Client.DeleteBucketInventoryConfiguration was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.DeleteBucketInventoryConfigurationInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteBucketInventoryConfiguration.Lock()
	mock.calls.DeleteBucketInventoryConfiguration = append(mock.calls.DeleteBucketInventoryConfiguration, callInfo)
	mock.lockDeleteBucketInventoryConfiguration.Unlock()
	return mock.DeleteBucketInventoryConfigurationFunc(ctx, params, optFns...)
}

// DeleteBucketInventoryConfigurationCalls gets all the calls that were made to DeleteBucketInventoryConfiguration.
// Check the length with:
//
//	len(mockedClient.DeleteBucketInventoryConfigurationCalls())
func (mock *ClientMock) DeleteBucketInventoryConfigurationCalls() []struct {
	Ctx    context.Context
	Params *s3.DeleteBucketInventoryConfigurationInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.DeleteBucketInventoryConfigurationInput
		OptFns []func(*s3.Options)
	}
	mock.lockDeleteBucketInventoryConfiguration.RLock()
	calls = mock.calls.DeleteBucketInventoryConfiguration
	mock.lockDeleteBucketInventoryConfiguration.RUnlock()
	return calls
}

// DeleteBucketLifecycle calls DeleteBucketLifecycleFunc.
func (mock *ClientMock) DeleteBucketLifecycle(ctx context.Context, params *s3.DeleteBucketLifecycleInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketLifecycleOutput, error) {
	if mock.DeleteBucketLifecycleFunc == nil {
		panic("ClientMock.DeleteBucketLifecycleFunc: method is nil but Client.DeleteBucketLifecycle was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.DeleteBucketLifecycleInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteBucketLifecycle.Lock()
	mock.calls.DeleteBucketLifecycle = append(mock.calls.DeleteBucketLifecycle, callInfo)
	mock.lockDeleteBucketLifecycle.Unlock()
	return mock.DeleteBucketLifecycleFunc(ctx, params, optFns...)
}

// DeleteBucketLifecycleCalls gets all the calls that were made to DeleteBucketLifecycle.
// Check the length with:
//
//	len(mockedClient.DeleteBucketLifecycleCalls())
func (mock *ClientMock) DeleteBucketLifecycleCalls() []struct {
	Ctx    context.Context
	Params *s3.DeleteBucketLifecycleInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.DeleteBucketLifecycleInput
		OptFns []func(*s3.Options)
	}
	mock.lockDeleteBucketLifecycle.RLock()
	calls = mock.calls.DeleteBucketLifecycle
	mock.lockDeleteBucketLifecycle.RUnlock()
	return calls
}

// DeleteBucketMetricsConfiguration calls DeleteBucketMetricsConfigurationFunc.
func (mock *ClientMock) DeleteBucketMetricsConfiguration(ctx context.Context, params *s3.DeleteBucketMetricsConfigurationInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketMetricsConfigurationOutput, error) {
	if mock.DeleteBucketMetricsConfigurationFunc == nil {
		panic("ClientMock.DeleteBucketMetricsConfigurationFunc: method is nil but Client.DeleteBucketMetricsConfiguration was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.DeleteBucketMetricsConfigurationInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteBucketMetricsConfiguration.Lock()
	mock.calls.DeleteBucketMetricsConfiguration = append(mock.calls.DeleteBucketMetricsConfiguration, callInfo)
	mock.lockDeleteBucketMetricsConfiguration.Unlock()
	return mock.DeleteBucketMetricsConfigurationFunc(ctx, params, optFns...)
}

// DeleteBucketMetricsConfigurationCalls gets all the calls that were made to DeleteBucketMetricsConfiguration.
// Check the length with:
//
//	len(mockedClient.DeleteBucketMetricsConfigurationCalls())
func (mock *ClientMock) DeleteBucketMetricsConfigurationCalls() []struct {
	Ctx    context.Context
	Params *s3.DeleteBucketMetricsConfigurationInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.DeleteBucketMetricsConfigurationInput
		OptFns []func(*s3.Options)
	}
	mock.lockDeleteBucketMetricsConfiguration.RLock()
	calls = mock.calls.DeleteBucketMetricsConfiguration
	mock.lockDeleteBucketMetricsConfiguration.RUnlock()
	return calls
}

// DeleteBucketOwnershipControls calls DeleteBucketOwnershipControlsFunc.
func (mock *ClientMock) DeleteBucketOwnershipControls(ctx context.Context, params *s3.DeleteBucketOwnershipControlsInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketOwnershipControlsOutput, error) {
	if mock.DeleteBucketOwnershipControlsFunc == nil {
		panic("ClientMock.DeleteBucketOwnershipControlsFunc: method is nil but Client.DeleteBucketOwnershipControls was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.DeleteBucketOwnershipControlsInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteBucketOwnershipControls.Lock()
	mock.calls.DeleteBucketOwnershipControls = append(mock.calls.DeleteBucketOwnershipControls, callInfo)
	mock.lockDeleteBucketOwnershipControls.Unlock()
	return mock.DeleteBucketOwnershipControlsFunc(ctx, params, optFns...)
}

// DeleteBucketOwnershipControlsCalls gets all the calls that were made to DeleteBucketOwnershipControls.
// Check the length with:
//
//	len(mockedClient.DeleteBucketOwnershipControlsCalls())
func (mock *ClientMock) DeleteBucketOwnershipControlsCalls() []struct {
	Ctx    context.Context
	Params *s3.DeleteBucketOwnershipControlsInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.DeleteBucketOwnershipControlsInput
		OptFns []func(*s3.Options)
	}
	mock.lockDeleteBucketOwnershipControls.RLock()
	calls = mock.calls.DeleteBucketOwnershipControls
	mock.lockDeleteBucketOwnershipControls.RUnlock()
	return calls
}

// DeleteBucketPolicy calls DeleteBucketPolicyFunc.
func (mock *ClientMock) DeleteBucketPolicy(ctx context.Context, params *s3.DeleteBucketPolicyInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketPolicyOutput, error) {
	if mock.DeleteBucketPolicyFunc == nil {
		panic("ClientMock.DeleteBucketPolicyFunc: method is nil but Client.DeleteBucketPolicy was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.DeleteBucketPolicyInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteBucketPolicy.Lock()
	mock.calls.DeleteBucketPolicy = append(mock.calls.DeleteBucketPolicy, callInfo)
	mock.lockDeleteBucketPolicy.Unlock()
	return mock.DeleteBucketPolicyFunc(ctx, params, optFns...)
}

// DeleteBucketPolicyCalls gets all the calls that were made to DeleteBucketPolicy.
// Check the length with:
//
//	len(mockedClient.DeleteBucketPolicyCalls())
func (mock *ClientMock) DeleteBucketPolicyCalls() []struct {
	Ctx    context.Context
	Params *s3.DeleteBucketPolicyInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.DeleteBucketPolicyInput
		OptFns []func(*s3.Options)
	}
	mock.lockDeleteBucketPolicy.RLock()
	calls = mock.calls.DeleteBucketPolicy
	mock.lockDeleteBucketPolicy.RUnlock()
	return calls
}

// DeleteBucketReplication calls DeleteBucketReplicationFunc.
func (mock *ClientMock) DeleteBucketReplication(ctx context.Context, params *s3.DeleteBucketReplicationInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketReplicationOutput, error) {
	if mock.DeleteBucketReplicationFunc == nil {
		panic("ClientMock.DeleteBucketReplicationFunc: method is nil but Client.DeleteBucketReplication was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.DeleteBucketReplicationInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteBucketReplication.Lock()
	mock.calls.DeleteBucketReplication = append(mock.calls.DeleteBucketReplication, callInfo)
	mock.lockDeleteBucketReplication.Unlock()
	return mock.DeleteBucketReplicationFunc(ctx, params, optFns...)
}

// DeleteBucketReplicationCalls gets all the calls that were made to DeleteBucketReplication.
// Check the length with:
//
//	len(mockedClient.DeleteBucketReplicationCalls())
func (mock *ClientMock) DeleteBucketReplicationCalls() []struct {
	Ctx    context.Context
	Params *s3.DeleteBucketReplicationInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.DeleteBucketReplicationInput
		OptFns []func(*s3.Options)
	}
	mock.lockDeleteBucketReplication.RLock()
	calls = mock.calls.DeleteBucketReplication
	mock.lockDeleteBucketReplication.RUnlock()
	return calls
}

// DeleteBucketTagging calls DeleteBucketTaggingFunc.
func (mock *ClientMock) DeleteBucketTagging(ctx context.Context, params *s3.DeleteBucketTaggingInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketTaggingOutput, error) {
	if mock.DeleteBucketTaggingFunc == nil {
		panic("ClientMock.DeleteBucketTaggingFunc: method is nil but Client.DeleteBucketTagging was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.DeleteBucketTaggingInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteBucketTagging.Lock()
	mock.calls.DeleteBucketTagging = append(mock.calls.DeleteBucketTagging, callInfo)
	mock.lockDeleteBucketTagging.Unlock()
	return mock.DeleteBucketTaggingFunc(ctx, params, optFns...)
}

// DeleteBucketTaggingCalls gets all the calls that were made to DeleteBucketTagging.
// Check the length with:
//
//	len(mockedClient.DeleteBucketTaggingCalls())
func (mock *ClientMock) DeleteBucketTaggingCalls() []struct {
	Ctx    context.Context
	Params *s3.DeleteBucketTaggingInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.DeleteBucketTaggingInput
		OptFns []func(*s3.Options)
	}
	mock.lockDeleteBucketTagging.RLock()
	calls = mock.calls.DeleteBucketTagging
	mock.lockDeleteBucketTagging.RUnlock()
	return calls
}

// DeleteBucketWebsite calls DeleteBucketWebsiteFunc.
func (mock *ClientMock) DeleteBucketWebsite(ctx context.Context, params *s3.DeleteBucketWebsiteInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketWebsiteOutput, error) {
	if mock.DeleteBucketWebsiteFunc == nil {
		panic("ClientMock.DeleteBucketWebsiteFunc: method is nil but Client.DeleteBucketWebsite was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.DeleteBucketWebsiteInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteBucketWebsite.Lock()
	mock.calls.DeleteBucketWebsite = append(mock.calls.DeleteBucketWebsite, callInfo)
	mock.lockDeleteBucketWebsite.Unlock()
	return mock.DeleteBucketWebsiteFunc(ctx, params, optFns...)
}

// DeleteBucketWebsiteCalls gets all the calls that were made to DeleteBucketWebsite.
// Check the length with:
//
//	len(mockedClient.DeleteBucketWebsiteCalls())
func (mock *ClientMock) DeleteBucketWebsiteCalls() []struct {
	Ctx    context.Context
	Params *s3.DeleteBucketWebsiteInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.DeleteBucketWebsiteInput
		OptFns []func(*s3.Options)
	}
	mock.lockDeleteBucketWebsite.RLock()
	calls = mock.calls.DeleteBucketWebsite
	mock.lockDeleteBucketWebsite.RUnlock()
	return calls
}

// DeleteObject calls DeleteObjectFunc.
func (mock *ClientMock) DeleteObject(ctx context.Context, params *s3.DeleteObjectInput, optFns ...func(*s3.Options)) (*s3.DeleteObjectOutput, error) {
	if mock.DeleteObjectFunc == nil {
		panic("ClientMock.DeleteObjectFunc: method is nil but Client.DeleteObject was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.DeleteObjectInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteObject.Lock()
	mock.calls.DeleteObject = append(mock.calls.DeleteObject, callInfo)
	mock.lockDeleteObject.Unlock()
	return mock.DeleteObjectFunc(ctx, params, optFns...)
}

// DeleteObjectCalls gets all the calls that were made to DeleteObject.
// Check the length with:
//
//	len(mockedClient.DeleteObjectCalls())
func (mock *ClientMock) DeleteObjectCalls() []struct {
	Ctx    context.Context
	Params *s3.DeleteObjectInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.DeleteObjectInput
		OptFns []func(*s3.Options)
	}
	mock.lockDeleteObject.RLock()
	calls = mock.calls.DeleteObject
	mock.lockDeleteObject.RUnlock()
	return calls
}

// DeleteObjectTagging calls DeleteObjectTaggingFunc.
func (mock *ClientMock) DeleteObjectTagging(ctx context.Context, params *s3.DeleteObjectTaggingInput, optFns ...func(*s3.Options)) (*s3.DeleteObjectTaggingOutput, error) {
	if mock.DeleteObjectTaggingFunc == nil {
		panic("ClientMock.DeleteObjectTaggingFunc: method is nil but Client.DeleteObjectTagging was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.DeleteObjectTaggingInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteObjectTagging.Lock()
	mock.calls.DeleteObjectTagging = append(mock.calls.DeleteObjectTagging, callInfo)
	mock.lockDeleteObjectTagging.Unlock()
	return mock.DeleteObjectTaggingFunc(ctx, params, optFns...)
}

// DeleteObjectTaggingCalls gets all the calls that were made to DeleteObjectTagging.
// Check the length with:
//
//	len(mockedClient.DeleteObjectTaggingCalls())
func (mock *ClientMock) DeleteObjectTaggingCalls() []struct {
	Ctx    context.Context
	Params *s3.DeleteObjectTaggingInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.DeleteObjectTaggingInput
		OptFns []func(*s3.Options)
	}
	mock.lockDeleteObjectTagging.RLock()
	calls = mock.calls.DeleteObjectTagging
	mock.lockDeleteObjectTagging.RUnlock()
	return calls
}

// DeleteObjects calls DeleteObjectsFunc.
func (mock *ClientMock) DeleteObjects(ctx context.Context, params *s3.DeleteObjectsInput, optFns ...func(*s3.Options)) (*s3.DeleteObjectsOutput, error) {
	if mock.DeleteObjectsFunc == nil {
		panic("ClientMock.DeleteObjectsFunc: method is nil but Client.DeleteObjects was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.DeleteObjectsInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteObjects.Lock()
	mock.calls.DeleteObjects = append(mock.calls.DeleteObjects, callInfo)
	mock.lockDeleteObjects.Unlock()
	return mock.DeleteObjectsFunc(ctx, params, optFns...)
}

// DeleteObjectsCalls gets all the calls that were made to DeleteObjects.
// Check the length with:
//
//	len(mockedClient.DeleteObjectsCalls())
func (mock *ClientMock) DeleteObjectsCalls() []struct {
	Ctx    context.Context
	Params *s3.DeleteObjectsInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.DeleteObjectsInput
		OptFns []func(*s3.Options)
	}
	mock.lockDeleteObjects.RLock()
	calls = mock.calls.DeleteObjects
	mock.lockDeleteObjects.RUnlock()
	return calls
}

// DeletePublicAccessBlock calls DeletePublicAccessBlockFunc.
func (mock *ClientMock) DeletePublicAccessBlock(ctx context.Context, params *s3.DeletePublicAccessBlockInput, optFns ...func(*s3.Options)) (*s3.DeletePublicAccessBlockOutput, error) {
	if mock.DeletePublicAccessBlockFunc == nil {
		panic("ClientMock.DeletePublicAccessBlockFunc: method is nil but Client.DeletePublicAccessBlock was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.DeletePublicAccessBlockInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeletePublicAccessBlock.Lock()
	mock.calls.DeletePublicAccessBlock = append(mock.calls.DeletePublicAccessBlock, callInfo)
	mock.lockDeletePublicAccessBlock.Unlock()
	return mock.DeletePublicAccessBlockFunc(ctx, params, optFns...)
}

// DeletePublicAccessBlockCalls gets all the calls that were made to DeletePublicAccessBlock.
// Check the length with:
//
//	len(mockedClient.DeletePublicAccessBlockCalls())
func (mock *ClientMock) DeletePublicAccessBlockCalls() []struct {
	Ctx    context.Context
	Params *s3.DeletePublicAccessBlockInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.DeletePublicAccessBlockInput
		OptFns []func(*s3.Options)
	}
	mock.lockDeletePublicAccessBlock.RLock()
	calls = mock.calls.DeletePublicAccessBlock
	mock.lockDeletePublicAccessBlock.RUnlock()
	return calls
}

// GetBucketAccelerateConfiguration calls GetBucketAccelerateConfigurationFunc.
func (mock *ClientMock) GetBucketAccelerateConfiguration(ctx context.Context, params *s3.GetBucketAccelerateConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketAccelerateConfigurationOutput, error) {
	if mock.GetBucketAccelerateConfigurationFunc == nil {
		panic("ClientMock.GetBucketAccelerateConfigurationFunc: method is nil but Client.GetBucketAccelerateConfiguration was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.GetBucketAccelerateConfigurationInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetBucketAccelerateConfiguration.Lock()
	mock.calls.GetBucketAccelerateConfiguration = append(mock.calls.GetBucketAccelerateConfiguration, callInfo)
	mock.lockGetBucketAccelerateConfiguration.Unlock()
	return mock.GetBucketAccelerateConfigurationFunc(ctx, params, optFns...)
}

// GetBucketAccelerateConfigurationCalls gets all the calls that were made to GetBucketAccelerateConfiguration.
// Check the length with:
//
//	len(mockedClient.GetBucketAccelerateConfigurationCalls())
func (mock *ClientMock) GetBucketAccelerateConfigurationCalls() []struct {
	Ctx    context.Context
	Params *s3.GetBucketAccelerateConfigurationInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.GetBucketAccelerateConfigurationInput
		OptFns []func(*s3.Options)
	}
	mock.lockGetBucketAccelerateConfiguration.RLock()
	calls = mock.calls.GetBucketAccelerateConfiguration
	mock.lockGetBucketAccelerateConfiguration.RUnlock()
	return calls
}

// GetBucketAcl calls GetBucketAclFunc.
func (mock *ClientMock) GetBucketAcl(ctx context.Context, params *s3.GetBucketAclInput, optFns ...func(*s3.Options)) (*s3.GetBucketAclOutput, error) {
	if mock.GetBucketAclFunc == nil {
		panic("ClientMock.GetBucketAclFunc: method is nil but Client.GetBucketAcl was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.GetBucketAclInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetBucketAcl.Lock()
	mock.calls.GetBucketAcl = append(mock.calls.GetBucketAcl, callInfo)
	mock.lockGetBucketAcl.Unlock()
	return mock.GetBucketAclFunc(ctx, params, optFns...)
}

// GetBucketAclCalls gets all the calls that were made to GetBucketAcl.
// Check the length with:
//
//	len(mockedClient.GetBucketAclCalls())
func (mock *ClientMock) GetBucketAclCalls() []struct {
	Ctx    context.Context
	Params *s3.GetBucketAclInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.GetBucketAclInput
		OptFns []func(*s3.Options)
	}
	mock.lockGetBucketAcl.RLock()
	calls = mock.calls.GetBucketAcl
	mock.lockGetBucketAcl.RUnlock()
	return calls
}

// GetBucketAnalyticsConfiguration calls GetBucketAnalyticsConfigurationFunc.
func (mock *ClientMock) GetBucketAnalyticsConfiguration(ctx context.Context, params *s3.GetBucketAnalyticsConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketAnalyticsConfigurationOutput, error) {
	if mock.GetBucketAnalyticsConfigurationFunc == nil {
		panic("ClientMock.GetBucketAnalyticsConfigurationFunc: method is nil but Client.GetBucketAnalyticsConfiguration was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.GetBucketAnalyticsConfigurationInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetBucketAnalyticsConfiguration.Lock()
	mock.calls.GetBucketAnalyticsConfiguration = append(mock.calls.GetBucketAnalyticsConfiguration, callInfo)
	mock.lockGetBucketAnalyticsConfiguration.Unlock()
	return mock.GetBucketAnalyticsConfigurationFunc(ctx, params, optFns...)
}

// GetBucketAnalyticsConfigurationCalls gets all the calls that were made to GetBucketAnalyticsConfiguration.
// Check the length with:
//
//	len(mockedClient.GetBucketAnalyticsConfigurationCalls())
func (mock *ClientMock) GetBucketAnalyticsConfigurationCalls() []struct {
	Ctx    context.Context
	Params *s3.GetBucketAnalyticsConfigurationInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.GetBucketAnalyticsConfigurationInput
		OptFns []func(*s3.Options)
	}
	mock.lockGetBucketAnalyticsConfiguration.RLock()
	calls = mock.calls.GetBucketAnalyticsConfiguration
	mock.lockGetBucketAnalyticsConfiguration.RUnlock()
	return calls
}

// GetBucketCors calls GetBucketCorsFunc.
func (mock *ClientMock) GetBucketCors(ctx context.Context, params *s3.GetBucketCorsInput, optFns ...func(*s3.Options)) (*s3.GetBucketCorsOutput, error) {
	if mock.GetBucketCorsFunc == nil {
		panic("ClientMock.GetBucketCorsFunc: method is nil but Client.GetBucketCors was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.GetBucketCorsInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetBucketCors.Lock()
	mock.calls.GetBucketCors = append(mock.calls.GetBucketCors, callInfo)
	mock.lockGetBucketCors.Unlock()
	return mock.GetBucketCorsFunc(ctx, params, optFns...)
}

// GetBucketCorsCalls gets all the calls that were made to GetBucketCors.
// Check the length with:
//
//	len(mockedClient.GetBucketCorsCalls())
func (mock *ClientMock) GetBucketCorsCalls() []struct {
	Ctx    context.Context
	Params *s3.GetBucketCorsInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.GetBucketCorsInput
		OptFns []func(*s3.Options)
	}
	mock.lockGetBucketCors.RLock()
	calls = mock.calls.GetBucketCors
	mock.lockGetBucketCors.RUnlock()
	return calls
}

// GetBucketEncryption calls GetBucketEncryptionFunc.
func (mock *ClientMock) GetBucketEncryption(ctx context.Context, params *s3.GetBucketEncryptionInput, optFns ...func(*s3.Options)) (*s3.GetBucketEncryptionOutput, error) {
	if mock.GetBucketEncryptionFunc == nil {
		panic("ClientMock.GetBucketEncryptionFunc: method is nil but Client.GetBucketEncryption was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.GetBucketEncryptionInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetBucketEncryption.Lock()
	mock.calls.GetBucketEncryption = append(mock.calls.GetBucketEncryption, callInfo)
	mock.lockGetBucketEncryption.Unlock()
	return mock.GetBucketEncryptionFunc(ctx, params, optFns...)
}

// GetBucketEncryptionCalls gets all the calls that were made to GetBucketEncryption.
// Check the length with:
//
//	len(mockedClient.GetBucketEncryptionCalls())
func (mock *ClientMock) GetBucketEncryptionCalls() []struct {
	Ctx    context.Context
	Params *s3.GetBucketEncryptionInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.GetBucketEncryptionInput
		OptFns []func(*s3.Options)
	}
	mock.lockGetBucketEncryption.RLock()
	calls = mock.calls.GetBucketEncryption
	mock.lockGetBucketEncryption.RUnlock()
	return calls
}

// GetBucketIntelligentTieringConfiguration calls GetBucketIntelligentTieringConfigurationFunc.
func (mock *ClientMock) GetBucketIntelligentTieringConfiguration(ctx context.Context, params *s3.GetBucketIntelligentTieringConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketIntelligentTieringConfigurationOutput, error) {
	if mock.GetBucketIntelligentTieringConfigurationFunc == nil {
		panic("ClientMock.GetBucketIntelligentTieringConfigurationFunc: method is nil but Client.GetBucketIntelligentTieringConfiguration was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.GetBucketIntelligentTieringConfigurationInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetBucketIntelligentTieringConfiguration.Lock()
	mock.calls.GetBucketIntelligentTieringConfiguration = append(mock.calls.GetBucketIntelligentTieringConfiguration, callInfo)
	mock.lockGetBucketIntelligentTieringConfiguration.Unlock()
	return mock.GetBucketIntelligentTieringConfigurationFunc(ctx, params, optFns...)
}

// GetBucketIntelligentTieringConfigurationCalls gets all the calls that were made to GetBucketIntelligentTieringConfiguration.
// Check the length with:
//
//	len(mockedClient.GetBucketIntelligentTieringConfigurationCalls())
func (mock *ClientMock) GetBucketIntelligentTieringConfigurationCalls() []struct {
	Ctx    context.Context
	Params *s3.GetBucketIntelligentTieringConfigurationInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.GetBucketIntelligentTieringConfigurationInput
		OptFns []func(*s3.Options)
	}
	mock.lockGetBucketIntelligentTieringConfiguration.RLock()
	calls = mock.calls.GetBucketIntelligentTieringConfiguration
	mock.lockGetBucketIntelligentTieringConfiguration.RUnlock()
	return calls
}

// GetBucketInventoryConfiguration calls GetBucketInventoryConfigurationFunc.
func (mock *ClientMock) GetBucketInventoryConfiguration(ctx context.Context, params *s3.GetBucketInventoryConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketInventoryConfigurationOutput, error) {
	if mock.GetBucketInventoryConfigurationFunc == nil {
		panic("ClientMock.GetBucketInventoryConfigurationFunc: method is nil but Client.GetBucketInventoryConfiguration was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.GetBucketInventoryConfigurationInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetBucketInventoryConfiguration.Lock()
	mock.calls.GetBucketInventoryConfiguration = append(mock.calls.GetBucketInventoryConfiguration, callInfo)
	mock.lockGetBucketInventoryConfiguration.Unlock()
	return mock.GetBucketInventoryConfigurationFunc(ctx, params, optFns...)
}

// GetBucketInventoryConfigurationCalls gets all the calls that were made to GetBucketInventoryConfiguration.
// Check the length with:
//
//	len(mockedClient.GetBucketInventoryConfigurationCalls())
func (mock *ClientMock) GetBucketInventoryConfigurationCalls() []struct {
	Ctx    context.Context
	Params *s3.GetBucketInventoryConfigurationInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.GetBucketInventoryConfigurationInput
		OptFns []func(*s3.Options)
	}
	mock.lockGetBucketInventoryConfiguration.RLock()
	calls = mock.calls.GetBucketInventoryConfiguration
	mock.lockGetBucketInventoryConfiguration.RUnlock()
	return calls
}

// GetBucketLifecycleConfiguration calls GetBucketLifecycleConfigurationFunc.
func (mock *ClientMock) GetBucketLifecycleConfiguration(ctx context.Context, params *s3.GetBucketLifecycleConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketLifecycleConfigurationOutput, error) {
	if mock.GetBucketLifecycleConfigurationFunc == nil {
		panic("ClientMock.GetBucketLifecycleConfigurationFunc: method is nil but Client.GetBucketLifecycleConfiguration was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.GetBucketLifecycleConfigurationInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetBucketLifecycleConfiguration.Lock()
	mock.calls.GetBucketLifecycleConfiguration = append(mock.calls.GetBucketLifecycleConfiguration, callInfo)
	mock.lockGetBucketLifecycleConfiguration.Unlock()
	return mock.GetBucketLifecycleConfigurationFunc(ctx, params, optFns...)
}

// GetBucketLifecycleConfigurationCalls gets all the calls that were made to GetBucketLifecycleConfiguration.
// Check the length with:
//
//	len(mockedClient.GetBucketLifecycleConfigurationCalls())
func (mock *ClientMock) GetBucketLifecycleConfigurationCalls() []struct {
	Ctx    context.Context
	Params *s3.GetBucketLifecycleConfigurationInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.GetBucketLifecycleConfigurationInput
		OptFns []func(*s3.Options)
	}
	mock.lockGetBucketLifecycleConfiguration.RLock()
	calls = mock.calls.GetBucketLifecycleConfiguration
	mock.lockGetBucketLifecycleConfiguration.RUnlock()
	return calls
}

// GetBucketLocation calls GetBucketLocationFunc.
func (mock *ClientMock) GetBucketLocation(ctx context.Context, params *s3.GetBucketLocationInput, optFns ...func(*s3.Options)) (*s3.GetBucketLocationOutput, error) {
	if mock.GetBucketLocationFunc == nil {
		panic("ClientMock.GetBucketLocationFunc: method is nil but Client.GetBucketLocation was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.GetBucketLocationInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetBucketLocation.Lock()
	mock.calls.GetBucketLocation = append(mock.calls.GetBucketLocation, callInfo)
	mock.lockGetBucketLocation.Unlock()
	return mock.GetBucketLocationFunc(ctx, params, optFns...)
}

// GetBucketLocationCalls gets all the calls that were made to GetBucketLocation.
// Check the length with:
//
//	len(mockedClient.GetBucketLocationCalls())
func (mock *ClientMock) GetBucketLocationCalls() []struct {
	Ctx    context.Context
	Params *s3.GetBucketLocationInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.GetBucketLocationInput
		OptFns []func(*s3.Options)
	}
	mock.lockGetBucketLocation.RLock()
	calls = mock.calls.GetBucketLocation
	mock.lockGetBucketLocation.RUnlock()
	return calls
}

// GetBucketLogging calls GetBucketLoggingFunc.
func (mock *ClientMock) GetBucketLogging(ctx context.Context, params *s3.GetBucketLoggingInput, optFns ...func(*s3.Options)) (*s3.GetBucketLoggingOutput, error) {
	if mock.GetBucketLoggingFunc == nil {
		panic("ClientMock.GetBucketLoggingFunc: method is nil but Client.GetBucketLogging was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.GetBucketLoggingInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetBucketLogging.Lock()
	mock.calls.GetBucketLogging = append(mock.calls.GetBucketLogging, callInfo)
	mock.lockGetBucketLogging.Unlock()
	return mock.GetBucketLoggingFunc(ctx, params, optFns...)
}

// GetBucketLoggingCalls gets all the calls that were made to GetBucketLogging.
// Check the length with:
//
//	len(mockedClient.GetBucketLoggingCalls())
func (mock *ClientMock) GetBucketLoggingCalls() []struct {
	Ctx    context.Context
	Params *s3.GetBucketLoggingInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.GetBucketLoggingInput
		OptFns []func(*s3.Options)
	}
	mock.lockGetBucketLogging.RLock()
	calls = mock.calls.GetBucketLogging
	mock.lockGetBucketLogging.RUnlock()
	return calls
}

// GetBucketMetricsConfiguration calls GetBucketMetricsConfigurationFunc.
func (mock *ClientMock) GetBucketMetricsConfiguration(ctx context.Context, params *s3.GetBucketMetricsConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketMetricsConfigurationOutput, error) {
	if mock.GetBucketMetricsConfigurationFunc == nil {
		panic("ClientMock.GetBucketMetricsConfigurationFunc: method is nil but Client.GetBucketMetricsConfiguration was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.GetBucketMetricsConfigurationInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetBucketMetricsConfiguration.Lock()
	mock.calls.GetBucketMetricsConfiguration = append(mock.calls.GetBucketMetricsConfiguration, callInfo)
	mock.lockGetBucketMetricsConfiguration.Unlock()
	return mock.GetBucketMetricsConfigurationFunc(ctx, params, optFns...)
}

// GetBucketMetricsConfigurationCalls gets all the calls that were made to GetBucketMetricsConfiguration.
// Check the length with:
//
//	len(mockedClient.GetBucketMetricsConfigurationCalls())
func (mock *ClientMock) GetBucketMetricsConfigurationCalls() []struct {
	Ctx    context.Context
	Params *s3.GetBucketMetricsConfigurationInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.GetBucketMetricsConfigurationInput
		OptFns []func(*s3.Options)
	}
	mock.lockGetBucketMetricsConfiguration.RLock()
	calls = mock.calls.GetBucketMetricsConfiguration
	mock.lockGetBucketMetricsConfiguration.RUnlock()
	return calls
}

// GetBucketNotificationConfiguration calls GetBucketNotificationConfigurationFunc.
func (mock *ClientMock) GetBucketNotificationConfiguration(ctx context.Context, params *s3.GetBucketNotificationConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetBucketNotificationConfigurationOutput, error) {
	if mock.GetBucketNotificationConfigurationFunc == nil {
		panic("ClientMock.GetBucketNotificationConfigurationFunc: method is nil but Client.GetBucketNotificationConfiguration was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.GetBucketNotificationConfigurationInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetBucketNotificationConfiguration.Lock()
	mock.calls.GetBucketNotificationConfiguration = append(mock.calls.GetBucketNotificationConfiguration, callInfo)
	mock.lockGetBucketNotificationConfiguration.Unlock()
	return mock.GetBucketNotificationConfigurationFunc(ctx, params, optFns...)
}

// GetBucketNotificationConfigurationCalls gets all the calls that were made to GetBucketNotificationConfiguration.
// Check the length with:
//
//	len(mockedClient.GetBucketNotificationConfigurationCalls())
func (mock *ClientMock) GetBucketNotificationConfigurationCalls() []struct {
	Ctx    context.Context
	Params *s3.GetBucketNotificationConfigurationInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.GetBucketNotificationConfigurationInput
		OptFns []func(*s3.Options)
	}
	mock.lockGetBucketNotificationConfiguration.RLock()
	calls = mock.calls.GetBucketNotificationConfiguration
	mock.lockGetBucketNotificationConfiguration.RUnlock()
	return calls
}

// GetBucketOwnershipControls calls GetBucketOwnershipControlsFunc.
func (mock *ClientMock) GetBucketOwnershipControls(ctx context.Context, params *s3.GetBucketOwnershipControlsInput, optFns ...func(*s3.Options)) (*s3.GetBucketOwnershipControlsOutput, error) {
	if mock.GetBucketOwnershipControlsFunc == nil {
		panic("ClientMock.GetBucketOwnershipControlsFunc: method is nil but Client.GetBucketOwnershipControls was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.GetBucketOwnershipControlsInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetBucketOwnershipControls.Lock()
	mock.calls.GetBucketOwnershipControls = append(mock.calls.GetBucketOwnershipControls, callInfo)
	mock.lockGetBucketOwnershipControls.Unlock()
	return mock.GetBucketOwnershipControlsFunc(ctx, params, optFns...)
}

// GetBucketOwnershipControlsCalls gets all the calls that were made to GetBucketOwnershipControls.
// Check the length with:
//
//	len(mockedClient.GetBucketOwnershipControlsCalls())
func (mock *ClientMock) GetBucketOwnershipControlsCalls() []struct {
	Ctx    context.Context
	Params *s3.GetBucketOwnershipControlsInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.GetBucketOwnershipControlsInput
		OptFns []func(*s3.Options)
	}
	mock.lockGetBucketOwnershipControls.RLock()
	calls = mock.calls.GetBucketOwnershipControls
	mock.lockGetBucketOwnershipControls.RUnlock()
	return calls
}

// GetBucketPolicy calls GetBucketPolicyFunc.
func (mock *ClientMock) GetBucketPolicy(ctx context.Context, params *s3.GetBucketPolicyInput, optFns ...func(*s3.Options)) (*s3.GetBucketPolicyOutput, error) {
	if mock.GetBucketPolicyFunc == nil {
		panic("ClientMock.GetBucketPolicyFunc: method is nil but Client.GetBucketPolicy was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.GetBucketPolicyInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetBucketPolicy.Lock()
	mock.calls.GetBucketPolicy = append(mock.calls.GetBucketPolicy, callInfo)
	mock.lockGetBucketPolicy.Unlock()
	return mock.GetBucketPolicyFunc(ctx, params, optFns...)
}

// GetBucketPolicyCalls gets all the calls that were made to GetBucketPolicy.
// Check the length with:
//
//	len(mockedClient.GetBucketPolicyCalls())
func (mock *ClientMock) GetBucketPolicyCalls() []struct {
	Ctx    context.Context
	Params *s3.GetBucketPolicyInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.GetBucketPolicyInput
		OptFns []func(*s3.Options)
	}
	mock.lockGetBucketPolicy.RLock()
	calls = mock.calls.GetBucketPolicy
	mock.lockGetBucketPolicy.RUnlock()
	return calls
}

// GetBucketPolicyStatus calls GetBucketPolicyStatusFunc.
func (mock *ClientMock) GetBucketPolicyStatus(ctx context.Context, params *s3.GetBucketPolicyStatusInput, optFns ...func(*s3.Options)) (*s3.GetBucketPolicyStatusOutput, error) {
	if mock.GetBucketPolicyStatusFunc == nil {
		panic("ClientMock.GetBucketPolicyStatusFunc: method is nil but Client.GetBucketPolicyStatus was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.GetBucketPolicyStatusInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetBucketPolicyStatus.Lock()
	mock.calls.GetBucketPolicyStatus = append(mock.calls.GetBucketPolicyStatus, callInfo)
	mock.lockGetBucketPolicyStatus.Unlock()
	return mock.GetBucketPolicyStatusFunc(ctx, params, optFns...)
}

// GetBucketPolicyStatusCalls gets all the calls that were made to GetBucketPolicyStatus.
// Check the length with:
//
//	len(mockedClient.GetBucketPolicyStatusCalls())
func (mock *ClientMock) GetBucketPolicyStatusCalls() []struct {
	Ctx    context.Context
	Params *s3.GetBucketPolicyStatusInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.GetBucketPolicyStatusInput
		OptFns []func(*s3.Options)
	}
	mock.lockGetBucketPolicyStatus.RLock()
	calls = mock.calls.GetBucketPolicyStatus
	mock.lockGetBucketPolicyStatus.RUnlock()
	return calls
}

// GetBucketReplication calls GetBucketReplicationFunc.
func (mock *ClientMock) GetBucketReplication(ctx context.Context, params *s3.GetBucketReplicationInput, optFns ...func(*s3.Options)) (*s3.GetBucketReplicationOutput, error) {
	if mock.GetBucketReplicationFunc == nil {
		panic("ClientMock.GetBucketReplicationFunc: method is nil but Client.GetBucketReplication was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.GetBucketReplicationInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetBucketReplication.Lock()
	mock.calls.GetBucketReplication = append(mock.calls.GetBucketReplication, callInfo)
	mock.lockGetBucketReplication.Unlock()
	return mock.GetBucketReplicationFunc(ctx, params, optFns...)
}

// GetBucketReplicationCalls gets all the calls that were made to GetBucketReplication.
// Check the length with:
//
//	len(mockedClient.GetBucketReplicationCalls())
func (mock *ClientMock) GetBucketReplicationCalls() []struct {
	Ctx    context.Context
	Params *s3.GetBucketReplicationInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.GetBucketReplicationInput
		OptFns []func(*s3.Options)
	}
	mock.lockGetBucketReplication.RLock()
	calls = mock.calls.GetBucketReplication
	mock.lockGetBucketReplication.RUnlock()
	return calls
}

// GetBucketRequestPayment calls GetBucketRequestPaymentFunc.
func (mock *ClientMock) GetBucketRequestPayment(ctx context.Context, params *s3.GetBucketRequestPaymentInput, optFns ...func(*s3.Options)) (*s3.GetBucketRequestPaymentOutput, error) {
	if mock.GetBucketRequestPaymentFunc == nil {
		panic("ClientMock.GetBucketRequestPaymentFunc: method is nil but Client.GetBucketRequestPayment was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.GetBucketRequestPaymentInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetBucketRequestPayment.Lock()
	mock.calls.GetBucketRequestPayment = append(mock.calls.GetBucketRequestPayment, callInfo)
	mock.lockGetBucketRequestPayment.Unlock()
	return mock.GetBucketRequestPaymentFunc(ctx, params, optFns...)
}

// GetBucketRequestPaymentCalls gets all the calls that were made to GetBucketRequestPayment.
// Check the length with:
//
//	len(mockedClient.GetBucketRequestPaymentCalls())
func (mock *ClientMock) GetBucketRequestPaymentCalls() []struct {
	Ctx    context.Context
	Params *s3.GetBucketRequestPaymentInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.GetBucketRequestPaymentInput
		OptFns []func(*s3.Options)
	}
	mock.lockGetBucketRequestPayment.RLock()
	calls = mock.calls.GetBucketRequestPayment
	mock.lockGetBucketRequestPayment.RUnlock()
	return calls
}

// GetBucketTagging calls GetBucketTaggingFunc.
func (mock *ClientMock) GetBucketTagging(ctx context.Context, params *s3.GetBucketTaggingInput, optFns ...func(*s3.Options)) (*s3.GetBucketTaggingOutput, error) {
	if mock.GetBucketTaggingFunc == nil {
		panic("ClientMock.GetBucketTaggingFunc: method is nil but Client.GetBucketTagging was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.GetBucketTaggingInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetBucketTagging.Lock()
	mock.calls.GetBucketTagging = append(mock.calls.GetBucketTagging, callInfo)
	mock.lockGetBucketTagging.Unlock()
	return mock.GetBucketTaggingFunc(ctx, params, optFns...)
}

// GetBucketTaggingCalls gets all the calls that were made to GetBucketTagging.
// Check the length with:
//
//	len(mockedClient.GetBucketTaggingCalls())
func (mock *ClientMock) GetBucketTaggingCalls() []struct {
	Ctx    context.Context
	Params *s3.GetBucketTaggingInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.GetBucketTaggingInput
		OptFns []func(*s3.Options)
	}
	mock.lockGetBucketTagging.RLock()
	calls = mock.calls.GetBucketTagging
	mock.lockGetBucketTagging.RUnlock()
	return calls
}

// GetBucketVersioning calls GetBucketVersioningFunc.
func (mock *ClientMock) GetBucketVersioning(ctx context.Context, params *s3.GetBucketVersioningInput, optFns ...func(*s3.Options)) (*s3.GetBucketVersioningOutput, error) {
	if mock.GetBucketVersioningFunc == nil {
		panic("ClientMock.GetBucketVersioningFunc: method is nil but Client.GetBucketVersioning was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.GetBucketVersioningInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetBucketVersioning.Lock()
	mock.calls.GetBucketVersioning = append(mock.calls.GetBucketVersioning, callInfo)
	mock.lockGetBucketVersioning.Unlock()
	return mock.GetBucketVersioningFunc(ctx, params, optFns...)
}

// GetBucketVersioningCalls gets all the calls that were made to GetBucketVersioning.
// Check the length with:
//
//	len(mockedClient.GetBucketVersioningCalls())
func (mock *ClientMock) GetBucketVersioningCalls() []struct {
	Ctx    context.Context
	Params *s3.GetBucketVersioningInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.GetBucketVersioningInput
		OptFns []func(*s3.Options)
	}
	mock.lockGetBucketVersioning.RLock()
	calls = mock.calls.GetBucketVersioning
	mock.lockGetBucketVersioning.RUnlock()
	return calls
}

// GetBucketWebsite calls GetBucketWebsiteFunc.
func (mock *ClientMock) GetBucketWebsite(ctx context.Context, params *s3.GetBucketWebsiteInput, optFns ...func(*s3.Options)) (*s3.GetBucketWebsiteOutput, error) {
	if mock.GetBucketWebsiteFunc == nil {
		panic("ClientMock.GetBucketWebsiteFunc: method is nil but Client.GetBucketWebsite was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.GetBucketWebsiteInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetBucketWebsite.Lock()
	mock.calls.GetBucketWebsite = append(mock.calls.GetBucketWebsite, callInfo)
	mock.lockGetBucketWebsite.Unlock()
	return mock.GetBucketWebsiteFunc(ctx, params, optFns...)
}

// GetBucketWebsiteCalls gets all the calls that were made to GetBucketWebsite.
// Check the length with:
//
//	len(mockedClient.GetBucketWebsiteCalls())
func (mock *ClientMock) GetBucketWebsiteCalls() []struct {
	Ctx    context.Context
	Params *s3.GetBucketWebsiteInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.GetBucketWebsiteInput
		OptFns []func(*s3.Options)
	}
	mock.lockGetBucketWebsite.RLock()
	calls = mock.calls.GetBucketWebsite
	mock.lockGetBucketWebsite.RUnlock()
	return calls
}

// GetObject calls GetObjectFunc.
func (mock *ClientMock) GetObject(ctx context.Context, params *s3.GetObjectInput, optFns ...func(*s3.Options)) (*s3.GetObjectOutput, error) {
	if mock.GetObjectFunc == nil {
		panic("ClientMock.GetObjectFunc: method is nil but Client.GetObject was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.GetObjectInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetObject.Lock()
	mock.calls.GetObject = append(mock.calls.GetObject, callInfo)
	mock.lockGetObject.Unlock()
	return mock.GetObjectFunc(ctx, params, optFns...)
}

// GetObjectCalls gets all the calls that were made to GetObject.
// Check the length with:
//
//	len(mockedClient.GetObjectCalls())
func (mock *ClientMock) GetObjectCalls() []struct {
	Ctx    context.Context
	Params *s3.GetObjectInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.GetObjectInput
		OptFns []func(*s3.Options)
	}
	mock.lockGetObject.RLock()
	calls = mock.calls.GetObject
	mock.lockGetObject.RUnlock()
	return calls
}

// GetObjectAcl calls GetObjectAclFunc.
func (mock *ClientMock) GetObjectAcl(ctx context.Context, params *s3.GetObjectAclInput, optFns ...func(*s3.Options)) (*s3.GetObjectAclOutput, error) {
	if mock.GetObjectAclFunc == nil {
		panic("ClientMock.GetObjectAclFunc: method is nil but Client.GetObjectAcl was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.GetObjectAclInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetObjectAcl.Lock()
	mock.calls.GetObjectAcl = append(mock.calls.GetObjectAcl, callInfo)
	mock.lockGetObjectAcl.Unlock()
	return mock.GetObjectAclFunc(ctx, params, optFns...)
}

// GetObjectAclCalls gets all the calls that were made to GetObjectAcl.
// Check the length with:
//
//	len(mockedClient.GetObjectAclCalls())
func (mock *ClientMock) GetObjectAclCalls() []struct {
	Ctx    context.Context
	Params *s3.GetObjectAclInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.GetObjectAclInput
		OptFns []func(*s3.Options)
	}
	mock.lockGetObjectAcl.RLock()
	calls = mock.calls.GetObjectAcl
	mock.lockGetObjectAcl.RUnlock()
	return calls
}

// GetObjectAttributes calls GetObjectAttributesFunc.
func (mock *ClientMock) GetObjectAttributes(ctx context.Context, params *s3.GetObjectAttributesInput, optFns ...func(*s3.Options)) (*s3.GetObjectAttributesOutput, error) {
	if mock.GetObjectAttributesFunc == nil {
		panic("ClientMock.GetObjectAttributesFunc: method is nil but Client.GetObjectAttributes was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.GetObjectAttributesInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetObjectAttributes.Lock()
	mock.calls.GetObjectAttributes = append(mock.calls.GetObjectAttributes, callInfo)
	mock.lockGetObjectAttributes.Unlock()
	return mock.GetObjectAttributesFunc(ctx, params, optFns...)
}

// GetObjectAttributesCalls gets all the calls that were made to GetObjectAttributes.
// Check the length with:
//
//	len(mockedClient.GetObjectAttributesCalls())
func (mock *ClientMock) GetObjectAttributesCalls() []struct {
	Ctx    context.Context
	Params *s3.GetObjectAttributesInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.GetObjectAttributesInput
		OptFns []func(*s3.Options)
	}
	mock.lockGetObjectAttributes.RLock()
	calls = mock.calls.GetObjectAttributes
	mock.lockGetObjectAttributes.RUnlock()
	return calls
}

// GetObjectLegalHold calls GetObjectLegalHoldFunc.
func (mock *ClientMock) GetObjectLegalHold(ctx context.Context, params *s3.GetObjectLegalHoldInput, optFns ...func(*s3.Options)) (*s3.GetObjectLegalHoldOutput, error) {
	if mock.GetObjectLegalHoldFunc == nil {
		panic("ClientMock.GetObjectLegalHoldFunc: method is nil but Client.GetObjectLegalHold was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.GetObjectLegalHoldInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetObjectLegalHold.Lock()
	mock.calls.GetObjectLegalHold = append(mock.calls.GetObjectLegalHold, callInfo)
	mock.lockGetObjectLegalHold.Unlock()
	return mock.GetObjectLegalHoldFunc(ctx, params, optFns...)
}

// GetObjectLegalHoldCalls gets all the calls that were made to GetObjectLegalHold.
// Check the length with:
//
//	len(mockedClient.GetObjectLegalHoldCalls())
func (mock *ClientMock) GetObjectLegalHoldCalls() []struct {
	Ctx    context.Context
	Params *s3.GetObjectLegalHoldInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.GetObjectLegalHoldInput
		OptFns []func(*s3.Options)
	}
	mock.lockGetObjectLegalHold.RLock()
	calls = mock.calls.GetObjectLegalHold
	mock.lockGetObjectLegalHold.RUnlock()
	return calls
}

// GetObjectLockConfiguration calls GetObjectLockConfigurationFunc.
func (mock *ClientMock) GetObjectLockConfiguration(ctx context.Context, params *s3.GetObjectLockConfigurationInput, optFns ...func(*s3.Options)) (*s3.GetObjectLockConfigurationOutput, error) {
	if mock.GetObjectLockConfigurationFunc == nil {
		panic("ClientMock.GetObjectLockConfigurationFunc: method is nil but Client.GetObjectLockConfiguration was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.GetObjectLockConfigurationInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetObjectLockConfiguration.Lock()
	mock.calls.GetObjectLockConfiguration = append(mock.calls.GetObjectLockConfiguration, callInfo)
	mock.lockGetObjectLockConfiguration.Unlock()
	return mock.GetObjectLockConfigurationFunc(ctx, params, optFns...)
}

// GetObjectLockConfigurationCalls gets all the calls that were made to GetObjectLockConfiguration.
// Check the length with:
//
//	len(mockedClient.GetObjectLockConfigurationCalls())
func (mock *ClientMock) GetObjectLockConfigurationCalls() []struct {
	Ctx    context.Context
	Params *s3.GetObjectLockConfigurationInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.GetObjectLockConfigurationInput
		OptFns []func(*s3.Options)
	}
	mock.lockGetObjectLockConfiguration.RLock()
	calls = mock.calls.GetObjectLockConfiguration
	mock.lockGetObjectLockConfiguration.RUnlock()
	return calls
}

// GetObjectRetention calls GetObjectRetentionFunc.
func (mock *ClientMock) GetObjectRetention(ctx context.Context, params *s3.GetObjectRetentionInput, optFns ...func(*s3.Options)) (*s3.GetObjectRetentionOutput, error) {
	if mock.GetObjectRetentionFunc == nil {
		panic("ClientMock.GetObjectRetentionFunc: method is nil but Client.GetObjectRetention was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.GetObjectRetentionInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetObjectRetention.Lock()
	mock.calls.GetObjectRetention = append(mock.calls.GetObjectRetention, callInfo)
	mock.lockGetObjectRetention.Unlock()
	return mock.GetObjectRetentionFunc(ctx, params, optFns...)
}

// GetObjectRetentionCalls gets all the calls that were made to GetObjectRetention.
// Check the length with:
//
//	len(mockedClient.GetObjectRetentionCalls())
func (mock *ClientMock) GetObjectRetentionCalls() []struct {
	Ctx    context.Context
	Params *s3.GetObjectRetentionInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.GetObjectRetentionInput
		OptFns []func(*s3.Options)
	}
	mock.lockGetObjectRetention.RLock()
	calls = mock.calls.GetObjectRetention
	mock.lockGetObjectRetention.RUnlock()
	return calls
}

// GetObjectTagging calls GetObjectTaggingFunc.
func (mock *ClientMock) GetObjectTagging(ctx context.Context, params *s3.GetObjectTaggingInput, optFns ...func(*s3.Options)) (*s3.GetObjectTaggingOutput, error) {
	if mock.GetObjectTaggingFunc == nil {
		panic("ClientMock.GetObjectTaggingFunc: method is nil but Client.GetObjectTagging was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.GetObjectTaggingInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetObjectTagging.Lock()
	mock.calls.GetObjectTagging = append(mock.calls.GetObjectTagging, callInfo)
	mock.lockGetObjectTagging.Unlock()
	return mock.GetObjectTaggingFunc(ctx, params, optFns...)
}

// GetObjectTaggingCalls gets all the calls that were made to GetObjectTagging.
// Check the length with:
//
//	len(mockedClient.GetObjectTaggingCalls())
func (mock *ClientMock) GetObjectTaggingCalls() []struct {
	Ctx    context.Context
	Params *s3.GetObjectTaggingInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.GetObjectTaggingInput
		OptFns []func(*s3.Options)
	}
	mock.lockGetObjectTagging.RLock()
	calls = mock.calls.GetObjectTagging
	mock.lockGetObjectTagging.RUnlock()
	return calls
}

// GetObjectTorrent calls GetObjectTorrentFunc.
func (mock *ClientMock) GetObjectTorrent(ctx context.Context, params *s3.GetObjectTorrentInput, optFns ...func(*s3.Options)) (*s3.GetObjectTorrentOutput, error) {
	if mock.GetObjectTorrentFunc == nil {
		panic("ClientMock.GetObjectTorrentFunc: method is nil but Client.GetObjectTorrent was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.GetObjectTorrentInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetObjectTorrent.Lock()
	mock.calls.GetObjectTorrent = append(mock.calls.GetObjectTorrent, callInfo)
	mock.lockGetObjectTorrent.Unlock()
	return mock.GetObjectTorrentFunc(ctx, params, optFns...)
}

// GetObjectTorrentCalls gets all the calls that were made to GetObjectTorrent.
// Check the length with:
//
//	len(mockedClient.GetObjectTorrentCalls())
func (mock *ClientMock) GetObjectTorrentCalls() []struct {
	Ctx    context.Context
	Params *s3.GetObjectTorrentInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.GetObjectTorrentInput
		OptFns []func(*s3.Options)
	}
	mock.lockGetObjectTorrent.RLock()
	calls = mock.calls.GetObjectTorrent
	mock.lockGetObjectTorrent.RUnlock()
	return calls
}

// GetPublicAccessBlock calls GetPublicAccessBlockFunc.
func (mock *ClientMock) GetPublicAccessBlock(ctx context.Context, params *s3.GetPublicAccessBlockInput, optFns ...func(*s3.Options)) (*s3.GetPublicAccessBlockOutput, error) {
	if mock.GetPublicAccessBlockFunc == nil {
		panic("ClientMock.GetPublicAccessBlockFunc: method is nil but Client.GetPublicAccessBlock was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.GetPublicAccessBlockInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetPublicAccessBlock.Lock()
	mock.calls.GetPublicAccessBlock = append(mock.calls.GetPublicAccessBlock, callInfo)
	mock.lockGetPublicAccessBlock.Unlock()
	return mock.GetPublicAccessBlockFunc(ctx, params, optFns...)
}

// GetPublicAccessBlockCalls gets all the calls that were made to GetPublicAccessBlock.
// Check the length with:
//
//	len(mockedClient.GetPublicAccessBlockCalls())
func (mock *ClientMock) GetPublicAccessBlockCalls() []struct {
	Ctx    context.Context
	Params *s3.GetPublicAccessBlockInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.GetPublicAccessBlockInput
		OptFns []func(*s3.Options)
	}
	mock.lockGetPublicAccessBlock.RLock()
	calls = mock.calls.GetPublicAccessBlock
	mock.lockGetPublicAccessBlock.RUnlock()
	return calls
}

// HeadBucket calls HeadBucketFunc.
func (mock *ClientMock) HeadBucket(ctx context.Context, params *s3.HeadBucketInput, optFns ...func(*s3.Options)) (*s3.HeadBucketOutput, error) {
	if mock.HeadBucketFunc == nil {
		panic("ClientMock.HeadBucketFunc: method is nil but Client.HeadBucket was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.HeadBucketInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockHeadBucket.Lock()
	mock.calls.HeadBucket = append(mock.calls.HeadBucket, callInfo)
	mock.lockHeadBucket.Unlock()
	return mock.HeadBucketFunc(ctx, params, optFns...)
}

// HeadBucketCalls gets all the calls that were made to HeadBucket.
// Check the length with:
//
//	len(mockedClient.HeadBucketCalls())
func (mock *ClientMock) HeadBucketCalls() []struct {
	Ctx    context.Context
	Params *s3.HeadBucketInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.HeadBucketInput
		OptFns []func(*s3.Options)
	}
	mock.lockHeadBucket.RLock()
	calls = mock.calls.HeadBucket
	mock.lockHeadBucket.RUnlock()
	return calls
}

// HeadObject calls HeadObjectFunc.
func (mock *ClientMock) HeadObject(ctx context.Context, params *s3.HeadObjectInput, optFns ...func(*s3.Options)) (*s3.HeadObjectOutput, error) {
	if mock.HeadObjectFunc == nil {
		panic("ClientMock.HeadObjectFunc: method is nil but Client.HeadObject was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.HeadObjectInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockHeadObject.Lock()
	mock.calls.HeadObject = append(mock.calls.HeadObject, callInfo)
	mock.lockHeadObject.Unlock()
	return mock.HeadObjectFunc(ctx, params, optFns...)
}

// HeadObjectCalls gets all the calls that were made to HeadObject.
// Check the length with:
//
//	len(mockedClient.HeadObjectCalls())
func (mock *ClientMock) HeadObjectCalls() []struct {
	Ctx    context.Context
	Params *s3.HeadObjectInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.HeadObjectInput
		OptFns []func(*s3.Options)
	}
	mock.lockHeadObject.RLock()
	calls = mock.calls.HeadObject
	mock.lockHeadObject.RUnlock()
	return calls
}

// ListBucketAnalyticsConfigurations calls ListBucketAnalyticsConfigurationsFunc.
func (mock *ClientMock) ListBucketAnalyticsConfigurations(ctx context.Context, params *s3.ListBucketAnalyticsConfigurationsInput, optFns ...func(*s3.Options)) (*s3.ListBucketAnalyticsConfigurationsOutput, error) {
	if mock.ListBucketAnalyticsConfigurationsFunc == nil {
		panic("ClientMock.ListBucketAnalyticsConfigurationsFunc: method is nil but Client.ListBucketAnalyticsConfigurations was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.ListBucketAnalyticsConfigurationsInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockListBucketAnalyticsConfigurations.Lock()
	mock.calls.ListBucketAnalyticsConfigurations = append(mock.calls.ListBucketAnalyticsConfigurations, callInfo)
	mock.lockListBucketAnalyticsConfigurations.Unlock()
	return mock.ListBucketAnalyticsConfigurationsFunc(ctx, params, optFns...)
}

// ListBucketAnalyticsConfigurationsCalls gets all the calls that were made to ListBucketAnalyticsConfigurations.
// Check the length with:
//
//	len(mockedClient.ListBucketAnalyticsConfigurationsCalls())
func (mock *ClientMock) ListBucketAnalyticsConfigurationsCalls() []struct {
	Ctx    context.Context
	Params *s3.ListBucketAnalyticsConfigurationsInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.ListBucketAnalyticsConfigurationsInput
		OptFns []func(*s3.Options)
	}
	mock.lockListBucketAnalyticsConfigurations.RLock()
	calls = mock.calls.ListBucketAnalyticsConfigurations
	mock.lockListBucketAnalyticsConfigurations.RUnlock()
	return calls
}

// ListBucketIntelligentTieringConfigurations calls ListBucketIntelligentTieringConfigurationsFunc.
func (mock *ClientMock) ListBucketIntelligentTieringConfigurations(ctx context.Context, params *s3.ListBucketIntelligentTieringConfigurationsInput, optFns ...func(*s3.Options)) (*s3.ListBucketIntelligentTieringConfigurationsOutput, error) {
	if mock.ListBucketIntelligentTieringConfigurationsFunc == nil {
		panic("ClientMock.ListBucketIntelligentTieringConfigurationsFunc: method is nil but Client.ListBucketIntelligentTieringConfigurations was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.ListBucketIntelligentTieringConfigurationsInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockListBucketIntelligentTieringConfigurations.Lock()
	mock.calls.ListBucketIntelligentTieringConfigurations = append(mock.calls.ListBucketIntelligentTieringConfigurations, callInfo)
	mock.lockListBucketIntelligentTieringConfigurations.Unlock()
	return mock.ListBucketIntelligentTieringConfigurationsFunc(ctx, params, optFns...)
}

// ListBucketIntelligentTieringConfigurationsCalls gets all the calls that were made to ListBucketIntelligentTieringConfigurations.
// Check the length with:
//
//	len(mockedClient.ListBucketIntelligentTieringConfigurationsCalls())
func (mock *ClientMock) ListBucketIntelligentTieringConfigurationsCalls() []struct {
	Ctx    context.Context
	Params *s3.ListBucketIntelligentTieringConfigurationsInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.ListBucketIntelligentTieringConfigurationsInput
		OptFns []func(*s3.Options)
	}
	mock.lockListBucketIntelligentTieringConfigurations.RLock()
	calls = mock.calls.ListBucketIntelligentTieringConfigurations
	mock.lockListBucketIntelligentTieringConfigurations.RUnlock()
	return calls
}

// ListBucketInventoryConfigurations calls ListBucketInventoryConfigurationsFunc.
func (mock *ClientMock) ListBucketInventoryConfigurations(ctx context.Context, params *s3.ListBucketInventoryConfigurationsInput, optFns ...func(*s3.Options)) (*s3.ListBucketInventoryConfigurationsOutput, error) {
	if mock.ListBucketInventoryConfigurationsFunc == nil {
		panic("ClientMock.ListBucketInventoryConfigurationsFunc: method is nil but Client.ListBucketInventoryConfigurations was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.ListBucketInventoryConfigurationsInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockListBucketInventoryConfigurations.Lock()
	mock.calls.ListBucketInventoryConfigurations = append(mock.calls.ListBucketInventoryConfigurations, callInfo)
	mock.lockListBucketInventoryConfigurations.Unlock()
	return mock.ListBucketInventoryConfigurationsFunc(ctx, params, optFns...)
}

// ListBucketInventoryConfigurationsCalls gets all the calls that were made to ListBucketInventoryConfigurations.
// Check the length with:
//
//	len(mockedClient.ListBucketInventoryConfigurationsCalls())
func (mock *ClientMock) ListBucketInventoryConfigurationsCalls() []struct {
	Ctx    context.Context
	Params *s3.ListBucketInventoryConfigurationsInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.ListBucketInventoryConfigurationsInput
		OptFns []func(*s3.Options)
	}
	mock.lockListBucketInventoryConfigurations.RLock()
	calls = mock.calls.ListBucketInventoryConfigurations
	mock.lockListBucketInventoryConfigurations.RUnlock()
	return calls
}

// ListBucketMetricsConfigurations calls ListBucketMetricsConfigurationsFunc.
func (mock *ClientMock) ListBucketMetricsConfigurations(ctx context.Context, params *s3.ListBucketMetricsConfigurationsInput, optFns ...func(*s3.Options)) (*s3.ListBucketMetricsConfigurationsOutput, error) {
	if mock.ListBucketMetricsConfigurationsFunc == nil {
		panic("ClientMock.ListBucketMetricsConfigurationsFunc: method is nil but Client.ListBucketMetricsConfigurations was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.ListBucketMetricsConfigurationsInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockListBucketMetricsConfigurations.Lock()
	mock.calls.ListBucketMetricsConfigurations = append(mock.calls.ListBucketMetricsConfigurations, callInfo)
	mock.lockListBucketMetricsConfigurations.Unlock()
	return mock.ListBucketMetricsConfigurationsFunc(ctx, params, optFns...)
}

// ListBucketMetricsConfigurationsCalls gets all the calls that were made to ListBucketMetricsConfigurations.
// Check the length with:
//
//	len(mockedClient.ListBucketMetricsConfigurationsCalls())
func (mock *ClientMock) ListBucketMetricsConfigurationsCalls() []struct {
	Ctx    context.Context
	Params *s3.ListBucketMetricsConfigurationsInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.ListBucketMetricsConfigurationsInput
		OptFns []func(*s3.Options)
	}
	mock.lockListBucketMetricsConfigurations.RLock()
	calls = mock.calls.ListBucketMetricsConfigurations
	mock.lockListBucketMetricsConfigurations.RUnlock()
	return calls
}

// ListBuckets calls ListBucketsFunc.
func (mock *ClientMock) ListBuckets(ctx context.Context, params *s3.ListBucketsInput, optFns ...func(*s3.Options)) (*s3.ListBucketsOutput, error) {
	if mock.ListBucketsFunc == nil {
		panic("ClientMock.ListBucketsFunc: method is nil but Client.ListBuckets was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.ListBucketsInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockListBuckets.Lock()
	mock.calls.ListBuckets = append(mock.calls.ListBuckets, callInfo)
	mock.lockListBuckets.Unlock()
	return mock.ListBucketsFunc(ctx, params, optFns...)
}

// ListBucketsCalls gets all the calls that were made to ListBuckets.
// Check the length with:
//
//	len(mockedClient.ListBucketsCalls())
func (mock *ClientMock) ListBucketsCalls() []struct {
	Ctx    context.Context
	Params *s3.ListBucketsInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.ListBucketsInput
		OptFns []func(*s3.Options)
	}
	mock.lockListBuckets.RLock()
	calls = mock.calls.ListBuckets
	mock.lockListBuckets.RUnlock()
	return calls
}

// ListMultipartUploads calls ListMultipartUploadsFunc.
func (mock *ClientMock) ListMultipartUploads(ctx context.Context, params *s3.ListMultipartUploadsInput, optFns ...func(*s3.Options)) (*s3.ListMultipartUploadsOutput, error) {
	if mock.ListMultipartUploadsFunc == nil {
		panic("ClientMock.ListMultipartUploadsFunc: method is nil but Client.ListMultipartUploads was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.ListMultipartUploadsInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockListMultipartUploads.Lock()
	mock.calls.ListMultipartUploads = append(mock.calls.ListMultipartUploads, callInfo)
	mock.lockListMultipartUploads.Unlock()
	return mock.ListMultipartUploadsFunc(ctx, params, optFns...)
}

// ListMultipartUploadsCalls gets all the calls that were made to ListMultipartUploads.
// Check the length with:
//
//	len(mockedClient.ListMultipartUploadsCalls())
func (mock *ClientMock) ListMultipartUploadsCalls() []struct {
	Ctx    context.Context
	Params *s3.ListMultipartUploadsInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.ListMultipartUploadsInput
		OptFns []func(*s3.Options)
	}
	mock.lockListMultipartUploads.RLock()
	calls = mock.calls.ListMultipartUploads
	mock.lockListMultipartUploads.RUnlock()
	return calls
}

// ListObjectVersions calls ListObjectVersionsFunc.
func (mock *ClientMock) ListObjectVersions(ctx context.Context, params *s3.ListObjectVersionsInput, optFns ...func(*s3.Options)) (*s3.ListObjectVersionsOutput, error) {
	if mock.ListObjectVersionsFunc == nil {
		panic("ClientMock.ListObjectVersionsFunc: method is nil but Client.ListObjectVersions was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.ListObjectVersionsInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockListObjectVersions.Lock()
	mock.calls.ListObjectVersions = append(mock.calls.ListObjectVersions, callInfo)
	mock.lockListObjectVersions.Unlock()
	return mock.ListObjectVersionsFunc(ctx, params, optFns...)
}

// ListObjectVersionsCalls gets all the calls that were made to ListObjectVersions.
// Check the length with:
//
//	len(mockedClient.ListObjectVersionsCalls())
func (mock *ClientMock) ListObjectVersionsCalls() []struct {
	Ctx    context.Context
	Params *s3.ListObjectVersionsInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.ListObjectVersionsInput
		OptFns []func(*s3.Options)
	}
	mock.lockListObjectVersions.RLock()
	calls = mock.calls.ListObjectVersions
	mock.lockListObjectVersions.RUnlock()
	return calls
}

// ListObjects calls ListObjectsFunc.
func (mock *ClientMock) ListObjects(ctx context.Context, params *s3.ListObjectsInput, optFns ...func(*s3.Options)) (*s3.ListObjectsOutput, error) {
	if mock.ListObjectsFunc == nil {
		panic("ClientMock.ListObjectsFunc: method is nil but Client.ListObjects was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.ListObjectsInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockListObjects.Lock()
	mock.calls.ListObjects = append(mock.calls.ListObjects, callInfo)
	mock.lockListObjects.Unlock()
	return mock.ListObjectsFunc(ctx, params, optFns...)
}

// ListObjectsCalls gets all the calls that were made to ListObjects.
// Check the length with:
//
//	len(mockedClient.ListObjectsCalls())
func (mock *ClientMock) ListObjectsCalls() []struct {
	Ctx    context.Context
	Params *s3.ListObjectsInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.ListObjectsInput
		OptFns []func(*s3.Options)
	}
	mock.lockListObjects.RLock()
	calls = mock.calls.ListObjects
	mock.lockListObjects.RUnlock()
	return calls
}

// ListObjectsV2 calls ListObjectsV2Func.
func (mock *ClientMock) ListObjectsV2(ctx context.Context, params *s3.ListObjectsV2Input, optFns ...func(*s3.Options)) (*s3.ListObjectsV2Output, error) {
	if mock.ListObjectsV2Func == nil {
		panic("ClientMock.ListObjectsV2Func: method is nil but Client.ListObjectsV2 was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.ListObjectsV2Input
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockListObjectsV2.Lock()
	mock.calls.ListObjectsV2 = append(mock.calls.ListObjectsV2, callInfo)
	mock.lockListObjectsV2.Unlock()
	return mock.ListObjectsV2Func(ctx, params, optFns...)
}

// ListObjectsV2Calls gets all the calls that were made to ListObjectsV2.
// Check the length with:
//
//	len(mockedClient.ListObjectsV2Calls())
func (mock *ClientMock) ListObjectsV2Calls() []struct {
	Ctx    context.Context
	Params *s3.ListObjectsV2Input
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.ListObjectsV2Input
		OptFns []func(*s3.Options)
	}
	mock.lockListObjectsV2.RLock()
	calls = mock.calls.ListObjectsV2
	mock.lockListObjectsV2.RUnlock()
	return calls
}

// ListParts calls ListPartsFunc.
func (mock *ClientMock) ListParts(ctx context.Context, params *s3.ListPartsInput, optFns ...func(*s3.Options)) (*s3.ListPartsOutput, error) {
	if mock.ListPartsFunc == nil {
		panic("ClientMock.ListPartsFunc: method is nil but Client.ListParts was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.ListPartsInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockListParts.Lock()
	mock.calls.ListParts = append(mock.calls.ListParts, callInfo)
	mock.lockListParts.Unlock()
	return mock.ListPartsFunc(ctx, params, optFns...)
}

// ListPartsCalls gets all the calls that were made to ListParts.
// Check the length with:
//
//	len(mockedClient.ListPartsCalls())
func (mock *ClientMock) ListPartsCalls() []struct {
	Ctx    context.Context
	Params *s3.ListPartsInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.ListPartsInput
		OptFns []func(*s3.Options)
	}
	mock.lockListParts.RLock()
	calls = mock.calls.ListParts
	mock.lockListParts.RUnlock()
	return calls
}

// PutBucketAccelerateConfiguration calls PutBucketAccelerateConfigurationFunc.
func (mock *ClientMock) PutBucketAccelerateConfiguration(ctx context.Context, params *s3.PutBucketAccelerateConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketAccelerateConfigurationOutput, error) {
	if mock.PutBucketAccelerateConfigurationFunc == nil {
		panic("ClientMock.PutBucketAccelerateConfigurationFunc: method is nil but Client.PutBucketAccelerateConfiguration was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.PutBucketAccelerateConfigurationInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockPutBucketAccelerateConfiguration.Lock()
	mock.calls.PutBucketAccelerateConfiguration = append(mock.calls.PutBucketAccelerateConfiguration, callInfo)
	mock.lockPutBucketAccelerateConfiguration.Unlock()
	return mock.PutBucketAccelerateConfigurationFunc(ctx, params, optFns...)
}

// PutBucketAccelerateConfigurationCalls gets all the calls that were made to PutBucketAccelerateConfiguration.
// Check the length with:
//
//	len(mockedClient.PutBucketAccelerateConfigurationCalls())
func (mock *ClientMock) PutBucketAccelerateConfigurationCalls() []struct {
	Ctx    context.Context
	Params *s3.PutBucketAccelerateConfigurationInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.PutBucketAccelerateConfigurationInput
		OptFns []func(*s3.Options)
	}
	mock.lockPutBucketAccelerateConfiguration.RLock()
	calls = mock.calls.PutBucketAccelerateConfiguration
	mock.lockPutBucketAccelerateConfiguration.RUnlock()
	return calls
}

// PutBucketAcl calls PutBucketAclFunc.
func (mock *ClientMock) PutBucketAcl(ctx context.Context, params *s3.PutBucketAclInput, optFns ...func(*s3.Options)) (*s3.PutBucketAclOutput, error) {
	if mock.PutBucketAclFunc == nil {
		panic("ClientMock.PutBucketAclFunc: method is nil but Client.PutBucketAcl was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.PutBucketAclInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockPutBucketAcl.Lock()
	mock.calls.PutBucketAcl = append(mock.calls.PutBucketAcl, callInfo)
	mock.lockPutBucketAcl.Unlock()
	return mock.PutBucketAclFunc(ctx, params, optFns...)
}

// PutBucketAclCalls gets all the calls that were made to PutBucketAcl.
// Check the length with:
//
//	len(mockedClient.PutBucketAclCalls())
func (mock *ClientMock) PutBucketAclCalls() []struct {
	Ctx    context.Context
	Params *s3.PutBucketAclInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.PutBucketAclInput
		OptFns []func(*s3.Options)
	}
	mock.lockPutBucketAcl.RLock()
	calls = mock.calls.PutBucketAcl
	mock.lockPutBucketAcl.RUnlock()
	return calls
}

// PutBucketAnalyticsConfiguration calls PutBucketAnalyticsConfigurationFunc.
func (mock *ClientMock) PutBucketAnalyticsConfiguration(ctx context.Context, params *s3.PutBucketAnalyticsConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketAnalyticsConfigurationOutput, error) {
	if mock.PutBucketAnalyticsConfigurationFunc == nil {
		panic("ClientMock.PutBucketAnalyticsConfigurationFunc: method is nil but Client.PutBucketAnalyticsConfiguration was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.PutBucketAnalyticsConfigurationInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockPutBucketAnalyticsConfiguration.Lock()
	mock.calls.PutBucketAnalyticsConfiguration = append(mock.calls.PutBucketAnalyticsConfiguration, callInfo)
	mock.lockPutBucketAnalyticsConfiguration.Unlock()
	return mock.PutBucketAnalyticsConfigurationFunc(ctx, params, optFns...)
}

// PutBucketAnalyticsConfigurationCalls gets all the calls that were made to PutBucketAnalyticsConfiguration.
// Check the length with:
//
//	len(mockedClient.PutBucketAnalyticsConfigurationCalls())
func (mock *ClientMock) PutBucketAnalyticsConfigurationCalls() []struct {
	Ctx    context.Context
	Params *s3.PutBucketAnalyticsConfigurationInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.PutBucketAnalyticsConfigurationInput
		OptFns []func(*s3.Options)
	}
	mock.lockPutBucketAnalyticsConfiguration.RLock()
	calls = mock.calls.PutBucketAnalyticsConfiguration
	mock.lockPutBucketAnalyticsConfiguration.RUnlock()
	return calls
}

// PutBucketCors calls PutBucketCorsFunc.
func (mock *ClientMock) PutBucketCors(ctx context.Context, params *s3.PutBucketCorsInput, optFns ...func(*s3.Options)) (*s3.PutBucketCorsOutput, error) {
	if mock.PutBucketCorsFunc == nil {
		panic("ClientMock.PutBucketCorsFunc: method is nil but Client.PutBucketCors was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.PutBucketCorsInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockPutBucketCors.Lock()
	mock.calls.PutBucketCors = append(mock.calls.PutBucketCors, callInfo)
	mock.lockPutBucketCors.Unlock()
	return mock.PutBucketCorsFunc(ctx, params, optFns...)
}

// PutBucketCorsCalls gets all the calls that were made to PutBucketCors.
// Check the length with:
//
//	len(mockedClient.PutBucketCorsCalls())
func (mock *ClientMock) PutBucketCorsCalls() []struct {
	Ctx    context.Context
	Params *s3.PutBucketCorsInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.PutBucketCorsInput
		OptFns []func(*s3.Options)
	}
	mock.lockPutBucketCors.RLock()
	calls = mock.calls.PutBucketCors
	mock.lockPutBucketCors.RUnlock()
	return calls
}

// PutBucketEncryption calls PutBucketEncryptionFunc.
func (mock *ClientMock) PutBucketEncryption(ctx context.Context, params *s3.PutBucketEncryptionInput, optFns ...func(*s3.Options)) (*s3.PutBucketEncryptionOutput, error) {
	if mock.PutBucketEncryptionFunc == nil {
		panic("ClientMock.PutBucketEncryptionFunc: method is nil but Client.PutBucketEncryption was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.PutBucketEncryptionInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockPutBucketEncryption.Lock()
	mock.calls.PutBucketEncryption = append(mock.calls.PutBucketEncryption, callInfo)
	mock.lockPutBucketEncryption.Unlock()
	return mock.PutBucketEncryptionFunc(ctx, params, optFns...)
}

// PutBucketEncryptionCalls gets all the calls that were made to PutBucketEncryption.
// Check the length with:
//
//	len(mockedClient.PutBucketEncryptionCalls())
func (mock *ClientMock) PutBucketEncryptionCalls() []struct {
	Ctx    context.Context
	Params *s3.PutBucketEncryptionInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.PutBucketEncryptionInput
		OptFns []func(*s3.Options)
	}
	mock.lockPutBucketEncryption.RLock()
	calls = mock.calls.PutBucketEncryption
	mock.lockPutBucketEncryption.RUnlock()
	return calls
}

// PutBucketIntelligentTieringConfiguration calls PutBucketIntelligentTieringConfigurationFunc.
func (mock *ClientMock) PutBucketIntelligentTieringConfiguration(ctx context.Context, params *s3.PutBucketIntelligentTieringConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketIntelligentTieringConfigurationOutput, error) {
	if mock.PutBucketIntelligentTieringConfigurationFunc == nil {
		panic("ClientMock.PutBucketIntelligentTieringConfigurationFunc: method is nil but Client.PutBucketIntelligentTieringConfiguration was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.PutBucketIntelligentTieringConfigurationInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockPutBucketIntelligentTieringConfiguration.Lock()
	mock.calls.PutBucketIntelligentTieringConfiguration = append(mock.calls.PutBucketIntelligentTieringConfiguration, callInfo)
	mock.lockPutBucketIntelligentTieringConfiguration.Unlock()
	return mock.PutBucketIntelligentTieringConfigurationFunc(ctx, params, optFns...)
}

// PutBucketIntelligentTieringConfigurationCalls gets all the calls that were made to PutBucketIntelligentTieringConfiguration.
// Check the length with:
//
//	len(mockedClient.PutBucketIntelligentTieringConfigurationCalls())
func (mock *ClientMock) PutBucketIntelligentTieringConfigurationCalls() []struct {
	Ctx    context.Context
	Params *s3.PutBucketIntelligentTieringConfigurationInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.PutBucketIntelligentTieringConfigurationInput
		OptFns []func(*s3.Options)
	}
	mock.lockPutBucketIntelligentTieringConfiguration.RLock()
	calls = mock.calls.PutBucketIntelligentTieringConfiguration
	mock.lockPutBucketIntelligentTieringConfiguration.RUnlock()
	return calls
}

// PutBucketInventoryConfiguration calls PutBucketInventoryConfigurationFunc.
func (mock *ClientMock) PutBucketInventoryConfiguration(ctx context.Context, params *s3.PutBucketInventoryConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketInventoryConfigurationOutput, error) {
	if mock.PutBucketInventoryConfigurationFunc == nil {
		panic("ClientMock.PutBucketInventoryConfigurationFunc: method is nil but Client.PutBucketInventoryConfiguration was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.PutBucketInventoryConfigurationInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockPutBucketInventoryConfiguration.Lock()
	mock.calls.PutBucketInventoryConfiguration = append(mock.calls.PutBucketInventoryConfiguration, callInfo)
	mock.lockPutBucketInventoryConfiguration.Unlock()
	return mock.PutBucketInventoryConfigurationFunc(ctx, params, optFns...)
}

// PutBucketInventoryConfigurationCalls gets all the calls that were made to PutBucketInventoryConfiguration.
// Check the length with:
//
//	len(mockedClient.PutBucketInventoryConfigurationCalls())
func (mock *ClientMock) PutBucketInventoryConfigurationCalls() []struct {
	Ctx    context.Context
	Params *s3.PutBucketInventoryConfigurationInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.PutBucketInventoryConfigurationInput
		OptFns []func(*s3.Options)
	}
	mock.lockPutBucketInventoryConfiguration.RLock()
	calls = mock.calls.PutBucketInventoryConfiguration
	mock.lockPutBucketInventoryConfiguration.RUnlock()
	return calls
}

// PutBucketLifecycleConfiguration calls PutBucketLifecycleConfigurationFunc.
func (mock *ClientMock) PutBucketLifecycleConfiguration(ctx context.Context, params *s3.PutBucketLifecycleConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketLifecycleConfigurationOutput, error) {
	if mock.PutBucketLifecycleConfigurationFunc == nil {
		panic("ClientMock.PutBucketLifecycleConfigurationFunc: method is nil but Client.PutBucketLifecycleConfiguration was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.PutBucketLifecycleConfigurationInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockPutBucketLifecycleConfiguration.Lock()
	mock.calls.PutBucketLifecycleConfiguration = append(mock.calls.PutBucketLifecycleConfiguration, callInfo)
	mock.lockPutBucketLifecycleConfiguration.Unlock()
	return mock.PutBucketLifecycleConfigurationFunc(ctx, params, optFns...)
}

// PutBucketLifecycleConfigurationCalls gets all the calls that were made to PutBucketLifecycleConfiguration.
// Check the length with:
//
//	len(mockedClient.PutBucketLifecycleConfigurationCalls())
func (mock *ClientMock) PutBucketLifecycleConfigurationCalls() []struct {
	Ctx    context.Context
	Params *s3.PutBucketLifecycleConfigurationInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.PutBucketLifecycleConfigurationInput
		OptFns []func(*s3.Options)
	}
	mock.lockPutBucketLifecycleConfiguration.RLock()
	calls = mock.calls.PutBucketLifecycleConfiguration
	mock.lockPutBucketLifecycleConfiguration.RUnlock()
	return calls
}

// PutBucketLogging calls PutBucketLoggingFunc.
func (mock *ClientMock) PutBucketLogging(ctx context.Context, params *s3.PutBucketLoggingInput, optFns ...func(*s3.Options)) (*s3.PutBucketLoggingOutput, error) {
	if mock.PutBucketLoggingFunc == nil {
		panic("ClientMock.PutBucketLoggingFunc: method is nil but Client.PutBucketLogging was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.PutBucketLoggingInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockPutBucketLogging.Lock()
	mock.calls.PutBucketLogging = append(mock.calls.PutBucketLogging, callInfo)
	mock.lockPutBucketLogging.Unlock()
	return mock.PutBucketLoggingFunc(ctx, params, optFns...)
}

// PutBucketLoggingCalls gets all the calls that were made to PutBucketLogging.
// Check the length with:
//
//	len(mockedClient.PutBucketLoggingCalls())
func (mock *ClientMock) PutBucketLoggingCalls() []struct {
	Ctx    context.Context
	Params *s3.PutBucketLoggingInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.PutBucketLoggingInput
		OptFns []func(*s3.Options)
	}
	mock.lockPutBucketLogging.RLock()
	calls = mock.calls.PutBucketLogging
	mock.lockPutBucketLogging.RUnlock()
	return calls
}

// PutBucketMetricsConfiguration calls PutBucketMetricsConfigurationFunc.
func (mock *ClientMock) PutBucketMetricsConfiguration(ctx context.Context, params *s3.PutBucketMetricsConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketMetricsConfigurationOutput, error) {
	if mock.PutBucketMetricsConfigurationFunc == nil {
		panic("ClientMock.PutBucketMetricsConfigurationFunc: method is nil but Client.PutBucketMetricsConfiguration was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.PutBucketMetricsConfigurationInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockPutBucketMetricsConfiguration.Lock()
	mock.calls.PutBucketMetricsConfiguration = append(mock.calls.PutBucketMetricsConfiguration, callInfo)
	mock.lockPutBucketMetricsConfiguration.Unlock()
	return mock.PutBucketMetricsConfigurationFunc(ctx, params, optFns...)
}

// PutBucketMetricsConfigurationCalls gets all the calls that were made to PutBucketMetricsConfiguration.
// Check the length with:
//
//	len(mockedClient.PutBucketMetricsConfigurationCalls())
func (mock *ClientMock) PutBucketMetricsConfigurationCalls() []struct {
	Ctx    context.Context
	Params *s3.PutBucketMetricsConfigurationInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.PutBucketMetricsConfigurationInput
		OptFns []func(*s3.Options)
	}
	mock.lockPutBucketMetricsConfiguration.RLock()
	calls = mock.calls.PutBucketMetricsConfiguration
	mock.lockPutBucketMetricsConfiguration.RUnlock()
	return calls
}

// PutBucketNotificationConfiguration calls PutBucketNotificationConfigurationFunc.
func (mock *ClientMock) PutBucketNotificationConfiguration(ctx context.Context, params *s3.PutBucketNotificationConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutBucketNotificationConfigurationOutput, error) {
	if mock.PutBucketNotificationConfigurationFunc == nil {
		panic("ClientMock.PutBucketNotificationConfigurationFunc: method is nil but Client.PutBucketNotificationConfiguration was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.PutBucketNotificationConfigurationInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockPutBucketNotificationConfiguration.Lock()
	mock.calls.PutBucketNotificationConfiguration = append(mock.calls.PutBucketNotificationConfiguration, callInfo)
	mock.lockPutBucketNotificationConfiguration.Unlock()
	return mock.PutBucketNotificationConfigurationFunc(ctx, params, optFns...)
}

// PutBucketNotificationConfigurationCalls gets all the calls that were made to PutBucketNotificationConfiguration.
// Check the length with:
//
//	len(mockedClient.PutBucketNotificationConfigurationCalls())
func (mock *ClientMock) PutBucketNotificationConfigurationCalls() []struct {
	Ctx    context.Context
	Params *s3.PutBucketNotificationConfigurationInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.PutBucketNotificationConfigurationInput
		OptFns []func(*s3.Options)
	}
	mock.lockPutBucketNotificationConfiguration.RLock()
	calls = mock.calls.PutBucketNotificationConfiguration
	mock.lockPutBucketNotificationConfiguration.RUnlock()
	return calls
}

// PutBucketOwnershipControls calls PutBucketOwnershipControlsFunc.
func (mock *ClientMock) PutBucketOwnershipControls(ctx context.Context, params *s3.PutBucketOwnershipControlsInput, optFns ...func(*s3.Options)) (*s3.PutBucketOwnershipControlsOutput, error) {
	if mock.PutBucketOwnershipControlsFunc == nil {
		panic("ClientMock.PutBucketOwnershipControlsFunc: method is nil but Client.PutBucketOwnershipControls was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.PutBucketOwnershipControlsInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockPutBucketOwnershipControls.Lock()
	mock.calls.PutBucketOwnershipControls = append(mock.calls.PutBucketOwnershipControls, callInfo)
	mock.lockPutBucketOwnershipControls.Unlock()
	return mock.PutBucketOwnershipControlsFunc(ctx, params, optFns...)
}

// PutBucketOwnershipControlsCalls gets all the calls that were made to PutBucketOwnershipControls.
// Check the length with:
//
//	len(mockedClient.PutBucketOwnershipControlsCalls())
func (mock *ClientMock) PutBucketOwnershipControlsCalls() []struct {
	Ctx    context.Context
	Params *s3.PutBucketOwnershipControlsInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.PutBucketOwnershipControlsInput
		OptFns []func(*s3.Options)
	}
	mock.lockPutBucketOwnershipControls.RLock()
	calls = mock.calls.PutBucketOwnershipControls
	mock.lockPutBucketOwnershipControls.RUnlock()
	return calls
}

// PutBucketPolicy calls PutBucketPolicyFunc.
func (mock *ClientMock) PutBucketPolicy(ctx context.Context, params *s3.PutBucketPolicyInput, optFns ...func(*s3.Options)) (*s3.PutBucketPolicyOutput, error) {
	if mock.PutBucketPolicyFunc == nil {
		panic("ClientMock.PutBucketPolicyFunc: method is nil but Client.PutBucketPolicy was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.PutBucketPolicyInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockPutBucketPolicy.Lock()
	mock.calls.PutBucketPolicy = append(mock.calls.PutBucketPolicy, callInfo)
	mock.lockPutBucketPolicy.Unlock()
	return mock.PutBucketPolicyFunc(ctx, params, optFns...)
}

// PutBucketPolicyCalls gets all the calls that were made to PutBucketPolicy.
// Check the length with:
//
//	len(mockedClient.PutBucketPolicyCalls())
func (mock *ClientMock) PutBucketPolicyCalls() []struct {
	Ctx    context.Context
	Params *s3.PutBucketPolicyInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.PutBucketPolicyInput
		OptFns []func(*s3.Options)
	}
	mock.lockPutBucketPolicy.RLock()
	calls = mock.calls.PutBucketPolicy
	mock.lockPutBucketPolicy.RUnlock()
	return calls
}

// PutBucketReplication calls PutBucketReplicationFunc.
func (mock *ClientMock) PutBucketReplication(ctx context.Context, params *s3.PutBucketReplicationInput, optFns ...func(*s3.Options)) (*s3.PutBucketReplicationOutput, error) {
	if mock.PutBucketReplicationFunc == nil {
		panic("ClientMock.PutBucketReplicationFunc: method is nil but Client.PutBucketReplication was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.PutBucketReplicationInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockPutBucketReplication.Lock()
	mock.calls.PutBucketReplication = append(mock.calls.PutBucketReplication, callInfo)
	mock.lockPutBucketReplication.Unlock()
	return mock.PutBucketReplicationFunc(ctx, params, optFns...)
}

// PutBucketReplicationCalls gets all the calls that were made to PutBucketReplication.
// Check the length with:
//
//	len(mockedClient.PutBucketReplicationCalls())
func (mock *ClientMock) PutBucketReplicationCalls() []struct {
	Ctx    context.Context
	Params *s3.PutBucketReplicationInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.PutBucketReplicationInput
		OptFns []func(*s3.Options)
	}
	mock.lockPutBucketReplication.RLock()
	calls = mock.calls.PutBucketReplication
	mock.lockPutBucketReplication.RUnlock()
	return calls
}

// PutBucketRequestPayment calls PutBucketRequestPaymentFunc.
func (mock *ClientMock) PutBucketRequestPayment(ctx context.Context, params *s3.PutBucketRequestPaymentInput, optFns ...func(*s3.Options)) (*s3.PutBucketRequestPaymentOutput, error) {
	if mock.PutBucketRequestPaymentFunc == nil {
		panic("ClientMock.PutBucketRequestPaymentFunc: method is nil but Client.PutBucketRequestPayment was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.PutBucketRequestPaymentInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockPutBucketRequestPayment.Lock()
	mock.calls.PutBucketRequestPayment = append(mock.calls.PutBucketRequestPayment, callInfo)
	mock.lockPutBucketRequestPayment.Unlock()
	return mock.PutBucketRequestPaymentFunc(ctx, params, optFns...)
}

// PutBucketRequestPaymentCalls gets all the calls that were made to PutBucketRequestPayment.
// Check the length with:
//
//	len(mockedClient.PutBucketRequestPaymentCalls())
func (mock *ClientMock) PutBucketRequestPaymentCalls() []struct {
	Ctx    context.Context
	Params *s3.PutBucketRequestPaymentInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.PutBucketRequestPaymentInput
		OptFns []func(*s3.Options)
	}
	mock.lockPutBucketRequestPayment.RLock()
	calls = mock.calls.PutBucketRequestPayment
	mock.lockPutBucketRequestPayment.RUnlock()
	return calls
}

// PutBucketTagging calls PutBucketTaggingFunc.
func (mock *ClientMock) PutBucketTagging(ctx context.Context, params *s3.PutBucketTaggingInput, optFns ...func(*s3.Options)) (*s3.PutBucketTaggingOutput, error) {
	if mock.PutBucketTaggingFunc == nil {
		panic("ClientMock.PutBucketTaggingFunc: method is nil but Client.PutBucketTagging was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.PutBucketTaggingInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockPutBucketTagging.Lock()
	mock.calls.PutBucketTagging = append(mock.calls.PutBucketTagging, callInfo)
	mock.lockPutBucketTagging.Unlock()
	return mock.PutBucketTaggingFunc(ctx, params, optFns...)
}

// PutBucketTaggingCalls gets all the calls that were made to PutBucketTagging.
// Check the length with:
//
//	len(mockedClient.PutBucketTaggingCalls())
func (mock *ClientMock) PutBucketTaggingCalls() []struct {
	Ctx    context.Context
	Params *s3.PutBucketTaggingInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.PutBucketTaggingInput
		OptFns []func(*s3.Options)
	}
	mock.lockPutBucketTagging.RLock()
	calls = mock.calls.PutBucketTagging
	mock.lockPutBucketTagging.RUnlock()
	return calls
}

// PutBucketVersioning calls PutBucketVersioningFunc.
func (mock *ClientMock) PutBucketVersioning(ctx context.Context, params *s3.PutBucketVersioningInput, optFns ...func(*s3.Options)) (*s3.PutBucketVersioningOutput, error) {
	if mock.PutBucketVersioningFunc == nil {
		panic("ClientMock.PutBucketVersioningFunc: method is nil but Client.PutBucketVersioning was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.PutBucketVersioningInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockPutBucketVersioning.Lock()
	mock.calls.PutBucketVersioning = append(mock.calls.PutBucketVersioning, callInfo)
	mock.lockPutBucketVersioning.Unlock()
	return mock.PutBucketVersioningFunc(ctx, params, optFns...)
}

// PutBucketVersioningCalls gets all the calls that were made to PutBucketVersioning.
// Check the length with:
//
//	len(mockedClient.PutBucketVersioningCalls())
func (mock *ClientMock) PutBucketVersioningCalls() []struct {
	Ctx    context.Context
	Params *s3.PutBucketVersioningInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.PutBucketVersioningInput
		OptFns []func(*s3.Options)
	}
	mock.lockPutBucketVersioning.RLock()
	calls = mock.calls.PutBucketVersioning
	mock.lockPutBucketVersioning.RUnlock()
	return calls
}

// PutBucketWebsite calls PutBucketWebsiteFunc.
func (mock *ClientMock) PutBucketWebsite(ctx context.Context, params *s3.PutBucketWebsiteInput, optFns ...func(*s3.Options)) (*s3.PutBucketWebsiteOutput, error) {
	if mock.PutBucketWebsiteFunc == nil {
		panic("ClientMock.PutBucketWebsiteFunc: method is nil but Client.PutBucketWebsite was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.PutBucketWebsiteInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockPutBucketWebsite.Lock()
	mock.calls.PutBucketWebsite = append(mock.calls.PutBucketWebsite, callInfo)
	mock.lockPutBucketWebsite.Unlock()
	return mock.PutBucketWebsiteFunc(ctx, params, optFns...)
}

// PutBucketWebsiteCalls gets all the calls that were made to PutBucketWebsite.
// Check the length with:
//
//	len(mockedClient.PutBucketWebsiteCalls())
func (mock *ClientMock) PutBucketWebsiteCalls() []struct {
	Ctx    context.Context
	Params *s3.PutBucketWebsiteInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.PutBucketWebsiteInput
		OptFns []func(*s3.Options)
	}
	mock.lockPutBucketWebsite.RLock()
	calls = mock.calls.PutBucketWebsite
	mock.lockPutBucketWebsite.RUnlock()
	return calls
}

// PutObject calls PutObjectFunc.
func (mock *ClientMock) PutObject(ctx context.Context, params *s3.PutObjectInput, optFns ...func(*s3.Options)) (*s3.PutObjectOutput, error) {
	if mock.PutObjectFunc == nil {
		panic("ClientMock.PutObjectFunc: method is nil but Client.PutObject was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.PutObjectInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockPutObject.Lock()
	mock.calls.PutObject = append(mock.calls.PutObject, callInfo)
	mock.lockPutObject.Unlock()
	return mock.PutObjectFunc(ctx, params, optFns...)
}

// PutObjectCalls gets all the calls that were made to PutObject.
// Check the length with:
//
//	len(mockedClient.PutObjectCalls())
func (mock *ClientMock) PutObjectCalls() []struct {
	Ctx    context.Context
	Params *s3.PutObjectInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.PutObjectInput
		OptFns []func(*s3.Options)
	}
	mock.lockPutObject.RLock()
	calls = mock.calls.PutObject
	mock.lockPutObject.RUnlock()
	return calls
}

// PutObjectAcl calls PutObjectAclFunc.
func (mock *ClientMock) PutObjectAcl(ctx context.Context, params *s3.PutObjectAclInput, optFns ...func(*s3.Options)) (*s3.PutObjectAclOutput, error) {
	if mock.PutObjectAclFunc == nil {
		panic("ClientMock.PutObjectAclFunc: method is nil but Client.PutObjectAcl was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.PutObjectAclInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockPutObjectAcl.Lock()
	mock.calls.PutObjectAcl = append(mock.calls.PutObjectAcl, callInfo)
	mock.lockPutObjectAcl.Unlock()
	return mock.PutObjectAclFunc(ctx, params, optFns...)
}

// PutObjectAclCalls gets all the calls that were made to PutObjectAcl.
// Check the length with:
//
//	len(mockedClient.PutObjectAclCalls())
func (mock *ClientMock) PutObjectAclCalls() []struct {
	Ctx    context.Context
	Params *s3.PutObjectAclInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.PutObjectAclInput
		OptFns []func(*s3.Options)
	}
	mock.lockPutObjectAcl.RLock()
	calls = mock.calls.PutObjectAcl
	mock.lockPutObjectAcl.RUnlock()
	return calls
}

// PutObjectLegalHold calls PutObjectLegalHoldFunc.
func (mock *ClientMock) PutObjectLegalHold(ctx context.Context, params *s3.PutObjectLegalHoldInput, optFns ...func(*s3.Options)) (*s3.PutObjectLegalHoldOutput, error) {
	if mock.PutObjectLegalHoldFunc == nil {
		panic("ClientMock.PutObjectLegalHoldFunc: method is nil but Client.PutObjectLegalHold was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.PutObjectLegalHoldInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockPutObjectLegalHold.Lock()
	mock.calls.PutObjectLegalHold = append(mock.calls.PutObjectLegalHold, callInfo)
	mock.lockPutObjectLegalHold.Unlock()
	return mock.PutObjectLegalHoldFunc(ctx, params, optFns...)
}

// PutObjectLegalHoldCalls gets all the calls that were made to PutObjectLegalHold.
// Check the length with:
//
//	len(mockedClient.PutObjectLegalHoldCalls())
func (mock *ClientMock) PutObjectLegalHoldCalls() []struct {
	Ctx    context.Context
	Params *s3.PutObjectLegalHoldInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.PutObjectLegalHoldInput
		OptFns []func(*s3.Options)
	}
	mock.lockPutObjectLegalHold.RLock()
	calls = mock.calls.PutObjectLegalHold
	mock.lockPutObjectLegalHold.RUnlock()
	return calls
}

// PutObjectLockConfiguration calls PutObjectLockConfigurationFunc.
func (mock *ClientMock) PutObjectLockConfiguration(ctx context.Context, params *s3.PutObjectLockConfigurationInput, optFns ...func(*s3.Options)) (*s3.PutObjectLockConfigurationOutput, error) {
	if mock.PutObjectLockConfigurationFunc == nil {
		panic("ClientMock.PutObjectLockConfigurationFunc: method is nil but Client.PutObjectLockConfiguration was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.PutObjectLockConfigurationInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockPutObjectLockConfiguration.Lock()
	mock.calls.PutObjectLockConfiguration = append(mock.calls.PutObjectLockConfiguration, callInfo)
	mock.lockPutObjectLockConfiguration.Unlock()
	return mock.PutObjectLockConfigurationFunc(ctx, params, optFns...)
}

// PutObjectLockConfigurationCalls gets all the calls that were made to PutObjectLockConfiguration.
// Check the length with:
//
//	len(mockedClient.PutObjectLockConfigurationCalls())
func (mock *ClientMock) PutObjectLockConfigurationCalls() []struct {
	Ctx    context.Context
	Params *s3.PutObjectLockConfigurationInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.PutObjectLockConfigurationInput
		OptFns []func(*s3.Options)
	}
	mock.lockPutObjectLockConfiguration.RLock()
	calls = mock.calls.PutObjectLockConfiguration
	mock.lockPutObjectLockConfiguration.RUnlock()
	return calls
}

// PutObjectRetention calls PutObjectRetentionFunc.
func (mock *ClientMock) PutObjectRetention(ctx context.Context, params *s3.PutObjectRetentionInput, optFns ...func(*s3.Options)) (*s3.PutObjectRetentionOutput, error) {
	if mock.PutObjectRetentionFunc == nil {
		panic("ClientMock.PutObjectRetentionFunc: method is nil but Client.PutObjectRetention was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.PutObjectRetentionInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockPutObjectRetention.Lock()
	mock.calls.PutObjectRetention = append(mock.calls.PutObjectRetention, callInfo)
	mock.lockPutObjectRetention.Unlock()
	return mock.PutObjectRetentionFunc(ctx, params, optFns...)
}

// PutObjectRetentionCalls gets all the calls that were made to PutObjectRetention.
// Check the length with:
//
//	len(mockedClient.PutObjectRetentionCalls())
func (mock *ClientMock) PutObjectRetentionCalls() []struct {
	Ctx    context.Context
	Params *s3.PutObjectRetentionInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.PutObjectRetentionInput
		OptFns []func(*s3.Options)
	}
	mock.lockPutObjectRetention.RLock()
	calls = mock.calls.PutObjectRetention
	mock.lockPutObjectRetention.RUnlock()
	return calls
}

// PutObjectTagging calls PutObjectTaggingFunc.
func (mock *ClientMock) PutObjectTagging(ctx context.Context, params *s3.PutObjectTaggingInput, optFns ...func(*s3.Options)) (*s3.PutObjectTaggingOutput, error) {
	if mock.PutObjectTaggingFunc == nil {
		panic("ClientMock.PutObjectTaggingFunc: method is nil but Client.PutObjectTagging was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.PutObjectTaggingInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockPutObjectTagging.Lock()
	mock.calls.PutObjectTagging = append(mock.calls.PutObjectTagging, callInfo)
	mock.lockPutObjectTagging.Unlock()
	return mock.PutObjectTaggingFunc(ctx, params, optFns...)
}

// PutObjectTaggingCalls gets all the calls that were made to PutObjectTagging.
// Check the length with:
//
//	len(mockedClient.PutObjectTaggingCalls())
func (mock *ClientMock) PutObjectTaggingCalls() []struct {
	Ctx    context.Context
	Params *s3.PutObjectTaggingInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.PutObjectTaggingInput
		OptFns []func(*s3.Options)
	}
	mock.lockPutObjectTagging.RLock()
	calls = mock.calls.PutObjectTagging
	mock.lockPutObjectTagging.RUnlock()
	return calls
}

// PutPublicAccessBlock calls PutPublicAccessBlockFunc.
func (mock *ClientMock) PutPublicAccessBlock(ctx context.Context, params *s3.PutPublicAccessBlockInput, optFns ...func(*s3.Options)) (*s3.PutPublicAccessBlockOutput, error) {
	if mock.PutPublicAccessBlockFunc == nil {
		panic("ClientMock.PutPublicAccessBlockFunc: method is nil but Client.PutPublicAccessBlock was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.PutPublicAccessBlockInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockPutPublicAccessBlock.Lock()
	mock.calls.PutPublicAccessBlock = append(mock.calls.PutPublicAccessBlock, callInfo)
	mock.lockPutPublicAccessBlock.Unlock()
	return mock.PutPublicAccessBlockFunc(ctx, params, optFns...)
}

// PutPublicAccessBlockCalls gets all the calls that were made to PutPublicAccessBlock.
// Check the length with:
//
//	len(mockedClient.PutPublicAccessBlockCalls())
func (mock *ClientMock) PutPublicAccessBlockCalls() []struct {
	Ctx    context.Context
	Params *s3.PutPublicAccessBlockInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.PutPublicAccessBlockInput
		OptFns []func(*s3.Options)
	}
	mock.lockPutPublicAccessBlock.RLock()
	calls = mock.calls.PutPublicAccessBlock
	mock.lockPutPublicAccessBlock.RUnlock()
	return calls
}

// RestoreObject calls RestoreObjectFunc.
func (mock *ClientMock) RestoreObject(ctx context.Context, params *s3.RestoreObjectInput, optFns ...func(*s3.Options)) (*s3.RestoreObjectOutput, error) {
	if mock.RestoreObjectFunc == nil {
		panic("ClientMock.RestoreObjectFunc: method is nil but Client.RestoreObject was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.RestoreObjectInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockRestoreObject.Lock()
	mock.calls.RestoreObject = append(mock.calls.RestoreObject, callInfo)
	mock.lockRestoreObject.Unlock()
	return mock.RestoreObjectFunc(ctx, params, optFns...)
}

// RestoreObjectCalls gets all the calls that were made to RestoreObject.
// Check the length with:
//
//	len(mockedClient.RestoreObjectCalls())
func (mock *ClientMock) RestoreObjectCalls() []struct {
	Ctx    context.Context
	Params *s3.RestoreObjectInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.RestoreObjectInput
		OptFns []func(*s3.Options)
	}
	mock.lockRestoreObject.RLock()
	calls = mock.calls.RestoreObject
	mock.lockRestoreObject.RUnlock()
	return calls
}

// SelectObjectContent calls SelectObjectContentFunc.
func (mock *ClientMock) SelectObjectContent(ctx context.Context, params *s3.SelectObjectContentInput, optFns ...func(*s3.Options)) (*s3.SelectObjectContentOutput, error) {
	if mock.SelectObjectContentFunc == nil {
		panic("ClientMock.SelectObjectContentFunc: method is nil but Client.SelectObjectContent was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.SelectObjectContentInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockSelectObjectContent.Lock()
	mock.calls.SelectObjectContent = append(mock.calls.SelectObjectContent, callInfo)
	mock.lockSelectObjectContent.Unlock()
	return mock.SelectObjectContentFunc(ctx, params, optFns...)
}

// SelectObjectContentCalls gets all the calls that were made to SelectObjectContent.
// Check the length with:
//
//	len(mockedClient.SelectObjectContentCalls())
func (mock *ClientMock) SelectObjectContentCalls() []struct {
	Ctx    context.Context
	Params *s3.SelectObjectContentInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.SelectObjectContentInput
		OptFns []func(*s3.Options)
	}
	mock.lockSelectObjectContent.RLock()
	calls = mock.calls.SelectObjectContent
	mock.lockSelectObjectContent.RUnlock()
	return calls
}

// UploadPart calls UploadPartFunc.
func (mock *ClientMock) UploadPart(ctx context.Context, params *s3.UploadPartInput, optFns ...func(*s3.Options)) (*s3.UploadPartOutput, error) {
	if mock.UploadPartFunc == nil {
		panic("ClientMock.UploadPartFunc: method is nil but Client.UploadPart was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.UploadPartInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockUploadPart.Lock()
	mock.calls.UploadPart = append(mock.calls.UploadPart, callInfo)
	mock.lockUploadPart.Unlock()
	return mock.UploadPartFunc(ctx, params, optFns...)
}

// UploadPartCalls gets all the calls that were made to UploadPart.
// Check the length with:
//
//	len(mockedClient.UploadPartCalls())
func (mock *ClientMock) UploadPartCalls() []struct {
	Ctx    context.Context
	Params *s3.UploadPartInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.UploadPartInput
		OptFns []func(*s3.Options)
	}
	mock.lockUploadPart.RLock()
	calls = mock.calls.UploadPart
	mock.lockUploadPart.RUnlock()
	return calls
}

// UploadPartCopy calls UploadPartCopyFunc.
func (mock *ClientMock) UploadPartCopy(ctx context.Context, params *s3.UploadPartCopyInput, optFns ...func(*s3.Options)) (*s3.UploadPartCopyOutput, error) {
	if mock.UploadPartCopyFunc == nil {
		panic("ClientMock.UploadPartCopyFunc: method is nil but Client.UploadPartCopy was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.UploadPartCopyInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockUploadPartCopy.Lock()
	mock.calls.UploadPartCopy = append(mock.calls.UploadPartCopy, callInfo)
	mock.lockUploadPartCopy.Unlock()
	return mock.UploadPartCopyFunc(ctx, params, optFns...)
}

// UploadPartCopyCalls gets all the calls that were made to UploadPartCopy.
// Check the length with:
//
//	len(mockedClient.UploadPartCopyCalls())
func (mock *ClientMock) UploadPartCopyCalls() []struct {
	Ctx    context.Context
	Params *s3.UploadPartCopyInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.UploadPartCopyInput
		OptFns []func(*s3.Options)
	}
	mock.lockUploadPartCopy.RLock()
	calls = mock.calls.UploadPartCopy
	mock.lockUploadPartCopy.RUnlock()
	return calls
}

// WriteGetObjectResponse calls WriteGetObjectResponseFunc.
func (mock *ClientMock) WriteGetObjectResponse(ctx context.Context, params *s3.WriteGetObjectResponseInput, optFns ...func(*s3.Options)) (*s3.WriteGetObjectResponseOutput, error) {
	if mock.WriteGetObjectResponseFunc == nil {
		panic("ClientMock.WriteGetObjectResponseFunc: method is nil but Client.WriteGetObjectResponse was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *s3.WriteGetObjectResponseInput
		OptFns []func(*s3.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockWriteGetObjectResponse.Lock()
	mock.calls.WriteGetObjectResponse = append(mock.calls.WriteGetObjectResponse, callInfo)
	mock.lockWriteGetObjectResponse.Unlock()
	return mock.WriteGetObjectResponseFunc(ctx, params, optFns...)
}

// WriteGetObjectResponseCalls gets all the calls that were made to WriteGetObjectResponse.
// Check the length with:
//
//	len(mockedClient.WriteGetObjectResponseCalls())
func (mock *ClientMock) WriteGetObjectResponseCalls() []struct {
	Ctx    context.Context
	Params *s3.WriteGetObjectResponseInput
	OptFns []func(*s3.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *s3.WriteGetObjectResponseInput
		OptFns []func(*s3.Options)
	}
	mock.lockWriteGetObjectResponse.RLock()
	calls = mock.calls.WriteGetObjectResponse
	mock.lockWriteGetObjectResponse.RUnlock()
	return calls
}
